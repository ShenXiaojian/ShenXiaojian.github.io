<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>制作WinPE</title>
      <link href="make-winpe.html"/>
      <url>make-winpe.html</url>
      
        <content type="html"><![CDATA[<p>有时<code>Windows</code>蓝屏，无法进入图形界面，尝试了多种方法都无法修复时就需要考虑重装系统。但重装系统之前需要将计算机中重要的资料备份，这时就可以制作一个Win PE（类似于Linux中的live environment）来访问计算机，将计算机中的文件拷贝到外部设备上。</p><h2 id="下载windows-ADK"><a href="#下载windows-ADK" class="headerlink" title="下载windows ADK"></a>下载windows ADK</h2><p>下载<a href="https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/download-winpe--windows-pe" target="_blank" rel="noopener">微软提供的Windows ADK</a>。点击下图中箭头所指的两个按钮并按照提示安装即可。</p><p><img src="https://cdn.jsdelivr.net/gh/shenxiaojian/ImageHost/20210210230829.png" srcset="/img/loading.gif" alt="image-20210210230829304"></p><h2 id="copype"><a href="#copype" class="headerlink" title="copype"></a>copype</h2><p>首先通过<code>copype</code>命令创建WinPE所需的工作目录，为下一步的<code>MakeWinPEMededia</code>做准备。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">copype amd64 C:\WinPE_amd64<br></code></pre></td></tr></table></figure><p>说明：<code>amd64</code>指制作的WinPE是64位的，<code>C:\WinPE_amd64</code>就是前面提到地创建WinPE所需的工作目录。</p><h3 id="修改copype"><a href="#修改copype" class="headerlink" title="修改copype"></a>修改copype</h3><p>本来是无需这一步的，但是上面那条命令报错说找不到相应的架构之类的，便需要修改<code>copy.cmd</code>文件了（历史遗留问题），文件路径为<code>C:\Program Files (x86)\Windows Kits\10\Assessment and Deployment Kit\Windows Preinstallation Environment\cmd.exe</code>。修改如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">rem 添加如下两个变量<br>set WinPERoot=C:\Program Files (x86)\Windows Kits\<span class="hljs-number">10</span>\Assessment and Deployment Kit\Windows Preinstallation Environment<br>set OSCDImgRoot=C:\Program Files (x86)\Windows Kits\<span class="hljs-number">10</span>\Assessment and Deployment Kit\Deployment Tools<br>rem 修改如下两个变量的值<br>set SOURCE=%WinPERoot%\%WINPE_ARCH%<br>set FWFILESROOT=%OSCDImgRoot%\%WINPE_ARCH%\Oscdimg<br></code></pre></td></tr></table></figure><h2 id="MakeWinPEMedia"><a href="#MakeWinPEMedia" class="headerlink" title="MakeWinPEMedia"></a>MakeWinPEMedia</h2><p>创建WinPE到介质中：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">MakeWinPEMedia /UFD C:\WinPE_amd64 P:<br></code></pre></td></tr></table></figure><p><code>UFD</code>表示USB flash drive，<code>C:\WinPE_amd64</code>与上节中的创建WinPE所需的工作目录对应，<code>P:</code>用来指定哪个磁盘被格式化成为WinPE。</p><p>大功告成！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.youtube.com/watch?v=UJWGeK7_XDE&amp;ab_channel=MicrosoftIoT" target="_blank" rel="noopener">Demo 2: Installing Windows PE on a USB Drive</a></p><p><a href="https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/winpe-create-usb-bootable-drive" target="_blank" rel="noopener">Create bootable WinPE media</a></p><p><a href="https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/download-winpe--windows-pe" target="_blank" rel="noopener">Download WinPE (Windows PE)</a></p><p>[WinPE: The following processor architecture was not found: amd64.](</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>修复Win10引导程序</title>
      <link href="repair-windows10-bootloader.html"/>
      <url>repair-windows10-bootloader.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>事发前用的是双系统，每个系统各在一块硬盘上。打算把Ubuntu换成Arch，因此装Arch的时候就直接把装有Ubuntu的那块硬盘全盘格式化了。没想到Win10的EFI引导文件在装有Ubuntu的那块硬盘上。幸好，Windows系统以用户友好出名，经过从网上查找资料，很快便解决了这个问题。记录如下：</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>先去微软官网下载制作移动盘的文件，制作启动盘。</p><p>通过BIOS进入启动盘系统：</p><p><img src="https://cdn.jsdelivr.net/gh/shenxiaojian/ImageHost/20210118175907.png" srcset="/img/loading.gif" alt="引导页面"></p><p>点击下一步，选择左下角的修复，可以看到如下界面，选择命令行提示符：</p><p><img src="https://cdn.jsdelivr.net/gh/shenxiaojian/ImageHost/20210118190108.png" srcset="/img/loading.gif" alt="修复页面"></p><p>输入如下命令，按提示进行修复：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">bootrec </span>/rebuildbcd<br></code></pre></td></tr></table></figure><p>再选择上图中的<code>启动修复</code>，然后重启即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件路径汇总</title>
      <link href="null.html"/>
      <url>null.html</url>
      
        <content type="html"><![CDATA[<p>Linux下一切皆文件，当我们需要修改什么配置的时候，便需要修改相应的文件。但是，当我们刚使用一个软件的时候可能是不知道文件的路径在哪（存放在<code>etc</code>路径下的这种除外）。此时，我们便需要去网上查询，但网上信息参差不齐，同时若后来还需要使用便还需再查一次。为了后续的方便，将我使用到的文件路径记录在这里。同时考虑到软件版本的不同可能文件的组织方式不同，因此还会同时标出软件的版本。</p><h2 id="KDE"><a href="#KDE" class="headerlink" title="KDE"></a>KDE</h2><h3 id="Plasma"><a href="#Plasma" class="headerlink" title="Plasma"></a>Plasma</h3><p>Global Theme移动到<code>~/.local/share/plasma/look-and-feel</code>或<code>/usr/share/plasma/look-and-feel</code>。</p><p>Plasma主题移动到<code>~/.local/share/plasma/desktoptheme</code>或<code>~/usr/share/plasma/desktoptheme</code>。</p><p>Cursors移动到<code>~/.icons</code>或<code>/usr/share/icons</code>。</p><p>icon移动到<code>~/.local/share/icons</code>或<code>/usr/share/icons</code>下。</p><p>sddm移动到<code>/usr/share/sddm/themes</code>中。</p><p><strong>持续更新中……</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux下优秀的命令行程序</title>
      <link href="awesome-command-line-utilities-in-linux.html"/>
      <url>awesome-command-line-utilities-in-linux.html</url>
      
        <content type="html"><![CDATA[<p>Linux下除了基础的<code>ls</code>，<code>cp</code>，<code>mv</code>等基础的命令行程序外，还有很多优秀的命令行程序，用好它们可以提高我们操作的效率。</p><p>本文将记录一些命令行程序的基础用法，同时会随着作者不断深入地使用它们而不断扩充本文的内容。</p><h2 id="1-批量重命名"><a href="#1-批量重命名" class="headerlink" title="1. 批量重命名"></a>1. 批量重命名</h2><p><code>mv</code>无法批量重命名，若需要批量重命名，这里引入一个perl脚本——<code>rename</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ rename <span class="hljs-string">"s/old/new/"</span> all_files..<br></code></pre></td></tr></table></figure><p>说明：<code>all_files</code>是待替换的所有文件。<code>s/old/new/</code>是正则表达式的字符串，表示用<code>new</code>代替<code>old</code>，其中的<code>/</code>起到分离作用，s表示substitute（代替）。</p><p>例如：</p><p>将所有的<code>ttc</code>后缀换为<code>ttf</code>后缀</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ rename <span class="hljs-string">"s/ttc/ttf"</span> *.ttc<br></code></pre></td></tr></table></figure><p><strong>持续更新中……</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APT设置代理</title>
      <link href="set-proxy-for-apt.html"/>
      <url>set-proxy-for-apt.html</url>
      
        <content type="html"><![CDATA[<p>通过<code>apt</code>安装软件时，如果存储软件包的服务器在国外，下载的时候可能会很慢，此时用一个快速的代理可以加快加载的速度。</p><p>具体方法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sudo vim /etc/apt/apt.conf.d/my_proxy<br></code></pre></td></tr></table></figure><p>通过以上命令新建一个文件<code>my_proxy</code>（名字无所谓）在其中添加如下代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">Acquire::http::proxy <span class="hljs-string">"http://username:password@server:port"</span>;<br></code></pre></td></tr></table></figure><p>注意将<code>server</code>和<code>port</code>换成你自己的ip和端口，若代理服务器需要认证，在<code>username</code>和<code>password</code>部分输入你的用户名和密码。如不需要则不用输入，可简化成如下形式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">Acquire::http::proxy <span class="hljs-string">"http://server:port"</span>;<br></code></pre></td></tr></table></figure><p>此外，如果你的协议是<code>socks</code>，记得用<code>socks5h</code>，即：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">Acquire::http::proxy <span class="hljs-string">"socks5h://server:port"</span>;<br></code></pre></td></tr></table></figure><p>此外，需要注意的是，设置之后永久生效。如果不想用，将<code>my_proxy</code>中新增的那行注释掉，或者直接把<code>my_proxy</code>文件删掉即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPM Install Error:Unexpected end of JSON input while parsing near *</title>
      <link href="npm-install-error-unexpected-end-of-json-input.html"/>
      <url>npm-install-error-unexpected-end-of-json-input.html</url>
      
        <content type="html"><![CDATA[<p>如果因为某些原因npm安装一个包只安装了部分就被打断了（例如：网络不稳定），就容易导致缓存损坏（cache corrupted）。后续安装包时便会爆出题目中的错误，解决方法也很简单：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm cache clean --force<br></code></pre></td></tr></table></figure><p>从新安装包即可，记得网络一定要稳定，不然还是会出现同样的问题。</p><p>具体参考了<a href="https://stackoverflow.com/questions/47675478/npm-install-errorunexpected-end-of-json-input-while-parsing-near-nt-webpack" target="_blank" rel="noopener">stackoverflow上的一篇文章</a>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>typora设置代理</title>
      <link href="set-proxy-for-typora.html"/>
      <url>set-proxy-for-typora.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-单次代理"><a href="#1-单次代理" class="headerlink" title="1. 单次代理"></a>1. 单次代理</h2><p>参考typora官方的<a href="https://support.typora.io/Launch-Arguments/" target="_blank" rel="noopener">Launch Arguments (Windows / Linux)</a>可以知道，在启动时指定<code>--proxy-server</code>参数可使<strong>本次启动的typora的流量</strong>走指定的代理，具体如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">typora --proxy-server=address:port<br></code></pre></td></tr></table></figure><p>需要注意的是<code>address:port</code>部分要指定传输的协议，如<code>http</code>，<code>socks5</code>等。</p><h2 id="2-持续代理"><a href="#2-持续代理" class="headerlink" title="2. 持续代理"></a>2. 持续代理</h2><p>若需要每次打开typora都自动开启代理，修改typora的配置文件即可。将<code>flag</code>对象下内容修改如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-string">"flags"</span>: [[<span class="hljs-string">"proxy-server"</span>, <span class="hljs-string">"address:port"</span>]]<br></code></pre></td></tr></table></figure><p><strong>再次提醒</strong>：<code>address:port</code>部分要指定传输的协议，如<code>http</code>，<code>socks5</code>等。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Tmux使用笔记</title>
      <link href="tmux-usage-notes.html"/>
      <url>tmux-usage-notes.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-session部分"><a href="#1-session部分" class="headerlink" title="1. session部分"></a>1. session部分</h2><h3 id="1-1-新建session"><a href="#1-1-新建session" class="headerlink" title="1.1. 新建session"></a>1.1. 新建session</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tmux new -s [会话名]<br></code></pre></td></tr></table></figure><h3 id="1-2-断开session"><a href="#1-2-断开session" class="headerlink" title="1.2. 断开session"></a>1.2. 断开session</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">prefix d<br><span class="hljs-comment"># detach</span><br></code></pre></td></tr></table></figure><h3 id="1-3-展示已有session"><a href="#1-3-展示已有session" class="headerlink" title="1.3. 展示已有session"></a>1.3. 展示已有session</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tmux ls<br></code></pre></td></tr></table></figure><h3 id="1-4-恢复session"><a href="#1-4-恢复session" class="headerlink" title="1.4. 恢复session"></a>1.4. 恢复session</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">tmux attach -t [会话名]<br><span class="hljs-comment"># 或者 </span><br>tmux a -t [会话名]<br><span class="hljs-comment"># a为attach的简写 </span><br><span class="hljs-comment"># t为target的简写</span><br></code></pre></td></tr></table></figure><h2 id="2-window部分"><a href="#2-window部分" class="headerlink" title="2. window部分"></a>2. window部分</h2><h3 id="2-1-新建window"><a href="#2-1-新建window" class="headerlink" title="2.1. 新建window"></a>2.1. 新建window</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">prefix c<br></code></pre></td></tr></table></figure><h3 id="2-2-切换window"><a href="#2-2-切换window" class="headerlink" title="2.2. 切换window"></a>2.2. 切换window</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SH"><span class="hljs-comment"># 切换到下一窗口</span><br>prefix n <br><span class="hljs-comment"># 切换到上一窗口</span><br>prefix p<br></code></pre></td></tr></table></figure><h2 id="3-pane部分"><a href="#3-pane部分" class="headerlink" title="3. pane部分"></a>3. pane部分</h2><h3 id="3-1-新建pane"><a href="#3-1-新建pane" class="headerlink" title="3.1. 新建pane"></a>3.1. 新建pane</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 竖直分割线</span><br>prefix v<br><span class="hljs-comment"># 水平分割线</span><br>prefix h<br></code></pre></td></tr></table></figure><h3 id="3-2-切换pane"><a href="#3-2-切换pane" class="headerlink" title="3.2. 切换pane"></a>3.2. 切换pane</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 顺时针方向切换pane</span><br>prefix o<br></code></pre></td></tr></table></figure><h2 id="4-配置文件"><a href="#4-配置文件" class="headerlink" title="4. 配置文件"></a>4. 配置文件</h2><p>用户目录下的<code>.tmux.conf</code>中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#remap prefix from 'C-b' to 'M-Space'</span><br>unbind C-b<br><span class="hljs-built_in">set</span>-option -g prefix M-Space<br><br><span class="hljs-comment"># split panes using | and -</span><br><span class="hljs-built_in">bind</span> v split-window -h<br><span class="hljs-built_in">bind</span> h split-window -v<br>unbind <span class="hljs-string">'"'</span><br>unbind %<br><br><span class="hljs-comment"># enable mouse</span><br><span class="hljs-built_in">set</span> -g mouse on<br><br><span class="hljs-comment"># add color</span><br><span class="hljs-built_in">set</span> -g default-terminal <span class="hljs-string">"xterm-256color"</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Windows字体</title>
      <link href="install-windows-fonts-on-linux.html"/>
      <url>install-windows-fonts-on-linux.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-简要介绍"><a href="#1-简要介绍" class="headerlink" title="1. 简要介绍"></a>1. 简要介绍</h2><p>Windows主要使用的字体格式为<code>ttf</code>，下面对其做简要介绍：</p><p>简单来说<code>ttf</code>（True Type Format）格式的字体是一种<code>outline fonts</code>（向量字体），是由苹果和微软合作提出的字体标准。而<code>ttc</code>后缀的文件则是（True Type Collection）将多个<code>ttf</code>文件的内容存到一个文件中，构成字体集合。</p><p>具体关于字体种类介绍可参考<a href="https://en.wikipedia.org/wiki/Computer_font" target="_blank" rel="noopener">Computer font</a>。</p><h2 id="2-获取字体"><a href="#2-获取字体" class="headerlink" title="2. 获取字体"></a>2. 获取字体</h2><p>获取Windows系统<code>Windows\fonts</code>下的所有（<code>*.ttf</code>和<code>*.ttc</code>）字体文件。</p><h2 id="3-安装在Linux系统上"><a href="#3-安装在Linux系统上" class="headerlink" title="3. 安装在Linux系统上"></a>3. 安装在Linux系统上</h2><p>在<code>/usr/share/fonts</code>中新建一个目录<code>windows-fonts</code>，将获取的字体复制到其中即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装deepin-qq</title>
      <link href="install-deepin-qq-on-ubuntu.html"/>
      <url>install-deepin-qq-on-ubuntu.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装deepin-wine-for-ubuntu"><a href="#1-安装deepin-wine-for-ubuntu" class="headerlink" title="1. 安装deepin-wine-for-ubuntu"></a>1. 安装deepin-wine-for-ubuntu</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu.git<br><span class="hljs-built_in">cd</span> deepin-wine-for-ubuntu<br>./install.sh<br></code></pre></td></tr></table></figure><h2 id="2-添加deepin仓库"><a href="#2-添加deepin仓库" class="headerlink" title="2. 添加deepin仓库"></a>2. 添加deepin仓库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget -qO - https://deepin-wine.i-m.dev/setup.sh | sudo sh<br><span class="hljs-comment"># -O file</span><br><span class="hljs-comment"># If - is used as file, documents will be printed to standard output.</span><br></code></pre></td></tr></table></figure><h2 id="3-安装QQ"><a href="#3-安装QQ" class="headerlink" title="3. 安装QQ"></a>3. 安装QQ</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install deepin.com.qq.im<br></code></pre></td></tr></table></figure><p>注销后重新登录便可以使用了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下GNOME桌面图标调整</title>
      <link href="icon-adjustment-in-ubuntu-gnome-desktop-environment.html"/>
      <url>icon-adjustment-in-ubuntu-gnome-desktop-environment.html</url>
      
        <content type="html"><![CDATA[<p>现在Ubuntu的默认桌面系统换为了GNOME，但是安装好后发现图标在笔记本上</p><p>会显得比较小，眼睛会很酸疼。经过查阅资料发现，只需安装<code>gnome-tweaks</code>即可。具体步骤如下：</p><h2 id="1-安装gnome-tweaks"><a href="#1-安装gnome-tweaks" class="headerlink" title="1. 安装gnome-tweaks"></a>1. 安装gnome-tweaks</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install gnome-tweaks<br></code></pre></td></tr></table></figure><h2 id="2-调整图标大小"><a href="#2-调整图标大小" class="headerlink" title="2. 调整图标大小"></a>2. 调整图标大小</h2><p>打开桌面左下角的<code>Show Application</code>，找到<code>Tweaks</code>，在窗口中选择<code>Fonts</code>，将<code>Scaling Factor</code>设为自己想要的比例即可。设置后所有的图标均会等比例放大（缩小）。</p><p><img src="https://cdn.jsdelivr.net/gh/shenxiaojian/ImageHost/202012252300356a0e19.png" srcset="/img/loading.gif" alt="image-20201118195850492"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux安装GUI</title>
      <link href="install-gui-about-archlinux.html"/>
      <url>install-gui-about-archlinux.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-说在前面"><a href="#1-说在前面" class="headerlink" title="1. 说在前面"></a>1. 说在前面</h2><p>在<a href="https://www.shenxiaojian.com/installation-summary-about-archlinux.html">ArchLinux安装小结</a>中完成了对ArchLinux的基本安装，接下来安装GUI。安装GUI的过程中了解到了一些基本概念，比如display server，desktop environment，display manager等。下面展开来说。</p><h2 id="2-Display-server"><a href="#2-Display-server" class="headerlink" title="2. Display server"></a>2. Display server</h2><p>常用的Display server是Xorg，简称X，以X为例X说明什么是Display server。以下引自<a href="https://en.wikipedia.org/wiki/X_Window_System#Software_architecture" target="_blank" rel="noopener">wiki</a>：</p><blockquote><p>X provides the basic framework for a GUI environment: drawing and moving windows on the display device and interacting with a mouse and  keyboard. X does not mandate the user interface – this is handled by  individual programs. </p></blockquote><p>简单来说，X是一套框架，实现了各种窗口系统的基本功能，比如移动，点击等，但不关心具体的用户界面（UI）。同时负责启动Desktop environment。</p><p>另外，每有1个用户登录进GUI，便启动了1个Xsession，由X负责管理。</p><h2 id="3-Desktop-environment"><a href="#3-Desktop-environment" class="headerlink" title="3. Desktop environment"></a>3. Desktop environment</h2><p>平时讨论最多的就是这个，比如说用KDE的桌面或者Xfce的桌面等。Desktop environment负责具体的UI。个人粗浅的认为，Display server就像一个人，真正工作干活都是靠他，而Desktop environment就像穿的衣服。即使外观差别很大，但界面与底层交互都是通过Display server。</p><p>另外补充一句，KDE其实并不是Desktop environment，而是一个社区或者是一个项目（包含很多软件），其中Desktop environment部分是一个名为Plasma Desktop的软件。</p><h2 id="4-Display-manager"><a href="#4-Display-manager" class="headerlink" title="4. Display manager"></a>4. Display manager</h2><p>Display manager先启动Display server，然后给用户提供登录界面。当正确输入账号密码时，由Display server启动Desktop environment。在这个界面可以选择启动哪个Xsession（从已有的Desktop environment/Window manager中选）。</p><h2 id="5-说在后面"><a href="#5-说在后面" class="headerlink" title="5. 说在后面"></a>5. 说在后面</h2><p>总结以上几步，启动的流程为Display manager启动Display server，同时负责验证用户身份，若账号密码正确再由Display server启动Desktop environment。</p><p>具体的安装过程可以看<a href="https://www.youtube.com/watch?v=P4IV5BYPiPs" target="_blank" rel="noopener">这里</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux安装小结</title>
      <link href="installation-summary-about-archlinux.html"/>
      <url>installation-summary-about-archlinux.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-说在前面"><a href="#1-说在前面" class="headerlink" title="1. 说在前面"></a>1. 说在前面</h2><p>参考<a href="https://wiki.archlinux.org/index.php/Installation_guide" target="_blank" rel="noopener">ArchWiki的Installation guide</a>，花了1天多的时间安装好了Arch Linux。对装系统也有了全新的认识。安装系统就是把可执行文件和配置文件存到外部存储设备，和配置引导方式使得固件可以正确调用引导程序启动操作系统。</p><p>因此，操作系统能否正常运行的核心就两点：</p><ol><li>是否把可执行文件和配置文件正确的放到硬盘上</li><li>是否正确的引导</li></ol><p>现在的计算机都是遵守存储程序原理，操作系统的运行也就是从硬盘中拿存储的程序，按照既定的程序和配置文件运行。因此，如果想影响一个操作系统，改变硬盘中的文件内容即可。</p><p>另外辨析几个概念：</p><p>BISO和UEFI都是固件的规范（接口），MBR和GPT都是分区表和分区方案。但是UEFI和GPT更新一些，用来继承前者。</p><h2 id="2-把系统存到外部存储设备"><a href="#2-把系统存到外部存储设备" class="headerlink" title="2. 把系统存到外部存储设备"></a>2. 把系统存到外部存储设备</h2><p>为了能通过Live Environment来安装相应的内容到硬盘，首先要对硬盘进行分区、格式化、挂载，写入系统软件。</p><h3 id="2-1-Partition-the-disks"><a href="#2-1-Partition-the-disks" class="headerlink" title="2.1. Partition the disks"></a>2.1. Partition the disks</h3><p>分区部分主要参考<a href="https://wiki.archlinux.org/index.php/Partitioning" target="_blank" rel="noopener">ArchWiki的Partitioning</a>。关于分区表的选取，分区方案的选取和分区软件的使用，wiki里已经很详细了。下面写些自己认为重要的点。</p><p><strong>首先，什么是分区？</strong></p><blockquote><p><a href="https://en.wikipedia.org/wiki/Disk_partitioning" target="_blank" rel="noopener">Partitioning</a> a block device (e.g. a hard disk) divides the available storage space into sections that can be managed independently. </p></blockquote><p>按我的理解，每一个分区都是一个独立的文件系统（File System 缩 fs），且对应于分区表中的一条记录。这也是为什么当其中一个分区损坏不会对其他分区造成影响。因为他们属于不同的文件系统。文件系统的具体内容在格式化部分讲。</p><p><strong>其次，分区表是什么，选哪种？</strong></p><p>分区表是用来存储分区方案的，即你对你的硬盘是怎么分区的，分成了几个区，每个区多大，是什么格式等等。主要的分区表有两种，一种是MBR（Master Boot Record），另一种是GPT（GUID Partition Table）。这两种分区表都是出自Intel之手，且GPT是用来继承MBR的。因此只要电脑条件允许，建议选择GPT类型。另外多啰嗦一句，GPT方案是<a href="https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface" target="_blank" rel="noopener">Unified Extensible Firmware Interface</a> 规范的一部分。</p><p><strong>然后，分区方案选哪种？</strong></p><p>有个概念要分清，分区（比如/dev/sda1）和目录（比如/home）不是一回事，分区是对硬盘的逻辑划分，分区与目录建立联系的地方在挂载部分。本次安装系统时划分了3个分区，其中一个作为<a href="https://wiki.archlinux.org/index.php/EFI_system_partition" target="_blank" rel="noopener">EFI system partition</a>（ESP 大小为512M），另外两个用来挂载根目录和home目录。记得指定分区格式分别为EFI System partition，Root partition (x86-64)和/home partition。在GPT方案中，<a href="https://en.wikipedia.org/wiki/GUID_Partition_Table#Partition_Type_GUIDs" target="_blank" rel="noopener">对每个分区指定分区类型后使得他们在分区表中都有一个唯一的GUID</a>。</p><p><strong>最后，用哪个分区工具？</strong></p><p>本次使用的是<a href="https://wiki.archlinux.org/index.php/Fdisk" target="_blank" rel="noopener">fdisk</a>，其他工具也可参考<a href="https://wiki.archlinux.org/index.php/Partitioning#Partitioning_tools" target="_blank" rel="noopener">ArchWiki中的Partitioning tools</a>。</p><h3 id="2-2-Format-the-partitions"><a href="#2-2-Format-the-partitions" class="headerlink" title="2.2. Format the partitions"></a>2.2. Format the partitions</h3><blockquote><p>Once the partitions have been created, each must be formatted with an appropriate <a href="https://wiki.archlinux.org/index.php/File_system" target="_blank" rel="noopener">file system</a>. </p></blockquote><p>在2.1中解释什么是分区的时候说到，每一个分区都是一个独立的文件系统。同时，每个分区只有经过格式化（指定该分区的文件系统类型，即make file system mkfs）之后才真正成为一个可以存数据的文件系统。</p><p>简单说一下什么是文件系统：不同的文件系统的区别大概就像不同管理方式的仓库。虽然存的都是数据，但是组织文件的形式和结构是不一样的。因此，对于一块硬盘，如果无法知道文件系统的类型，是无法解读其中的数据的。</p><p>另外，ESP文件系统一般需要FAT32格式，其他根目录和home目录一般需要EXT4格式。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># mkfs = make file system</span><br>$ mkfs.vfat -F32 /dev/sda1<br>$ mkfs.ext4 /dev/sda2<br></code></pre></td></tr></table></figure><h3 id="2-3-Mount-the-file-systems"><a href="#2-3-Mount-the-file-systems" class="headerlink" title="2.3. Mount the file systems"></a>2.3. Mount the file systems</h3><p>挂载比较简单，也是参考2.2中的那篇文章。本次安装采用的是符合UEFI规范的固件（firmware），打算ESP挂载到了/mnt/boot上。挂载部分的具体操作查看<a href="https://wiki.archlinux.org/index.php/File_systems#Mount_a_file_system" target="_blank" rel="noopener">ArchWiki的Mount a file system</a>。</p><h3 id="2-4-写入系统文件"><a href="#2-4-写入系统文件" class="headerlink" title="2.4. 写入系统文件"></a>2.4. 写入系统文件</h3><p>可以CD系统中通过</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ pacstrap /mnt base linux linux-firmware<br></code></pre></td></tr></table></figure><p>向/mnt写入所需的系统文件，<strong>建议是base，linux和linux-firmware都要安装。</strong></p><p>当然你也可以通过<code>arch-chroot /mnt</code>到/mnt目录下使用<code>pacman -S</code>分别安装刚刚提到的3个包。</p><h2 id="3-部署系统"><a href="#3-部署系统" class="headerlink" title="3. 部署系统"></a>3. 部署系统</h2><p>部署系统的目的为：设置正确的引导方式，使系统能正常启动和做一些必要的基础配置，比如网络。</p><p>额外插一步，通过genfstab（generate file system table）将分区表写入到硬盘当中，以便于程序启动的时候systemd会从fstab中读取分区信息自动挂载。</p><blockquote><p>One can use genfstab to generate fstab entries for mounted partitions given a  filesystem root.</p></blockquote><h3 id="3-1-Boot-process"><a href="#3-1-Boot-process" class="headerlink" title="3.1. Boot process"></a>3.1. Boot process</h3><p>这里只说从启动固件到发射内核部分，更详细的内容看<a href="https://wiki.archlinux.org/index.php/Arch_boot_process" target="_blank" rel="noopener">Arch boot process</a>。</p><p>机器通电后，固件就会启动，这里的固件是UEFI类型的。做完一系列的自检后就会通过NVRAM中存的boot entries（或许是.efi文件地址？）来找到ESP分区下的.efi文件，启动bootloader（本文为GRUB）。如果启动项（boot entry）是一块硬盘，那么固件会直接到fallback boot path <code>esp\EFI\BOOT\BOOTX64.EFI</code>中去找。如果只有1个启动项，建议就放在<code>esp\EFI\BOOT\BOOTX64.EFI</code>路径下。如果找不到就启动UEFI shell等待用户指定再启动。</p><p>lanch firmware(UEFI) —&gt; lanch  bootloader(GRUB) —&gt; lanuch kernal &amp; initial RAM disk</p><h3 id="3-2-安装GRUB"><a href="#3-2-安装GRUB" class="headerlink" title="3.2. 安装GRUB"></a>3.2. 安装GRUB</h3><p>具体过程补赘述，可以看<a href="https://wiki.archlinux.org/index.php/GRUB#UEFI_systems" target="_blank" rel="noopener">GRUB</a>。</p><p>要补充的就以下几点：</p><ol><li>GRUB安装时会往NVRAM中写记录（entry）。</li><li>/boot/grub目录是GRUB自己的主要目录，一些配置文件什么的都在这里面。生成的esp/EFI路径下的各个的.efi文件是为了给UEFI启动GRUB用的。</li><li>别忘了配置文件&amp;_&amp;</li></ol><h3 id="3-3-Initramfs"><a href="#3-3-Initramfs" class="headerlink" title="3.3. Initramfs"></a>3.3. Initramfs</h3><p>这部分不懂，比着葫芦画瓢。</p><h3 id="3-4-Network-configuration"><a href="#3-4-Network-configuration" class="headerlink" title="3.4. Network configuration"></a>3.4. Network configuration</h3><p>只需安装1个<a href="https://wiki.archlinux.org/index.php/Network_configuration#Network_managers" target="_blank" rel="noopener">Network managers</a>即可，本次选择的是带GUI的NetworkManage，安装完成后记得用systemctl设置开机自启。详细的步骤可以看<a href="https://www.youtube.com/watch?v=lhhA9KsoyT4" target="_blank" rel="noopener">这里</a>。</p><h2 id="4-说在后面"><a href="#4-说在后面" class="headerlink" title="4. 说在后面"></a>4. 说在后面</h2><p>本次安装在VirtualBox中，VirtualBox自身有些问题，我猜测是无法将boot entry写入NVRAM中，还没来得及验证。需要做些设置，具体看<a href="https://www.youtube.com/watch?v=YCegkcVheJA" target="_blank" rel="noopener">这里</a>，此外也可以设置fallback boot path，上文已经提到了。另外一个参考资料：<a href="https://www.youtube.com/watch?v=SVFgHPXBVug" target="_blank" rel="noopener">How To: VirtualBox EFI Arch Linux</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux操作 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1591阶乘数码</title>
      <link href="factorial-number-p1591-in-luogu.html"/>
      <url>factorial-number-p1591-in-luogu.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>详细题目描述见<a href="https://www.luogu.com.cn/problem/P1591" target="_blank" rel="noopener">原题地址</a>。</p><h2 id="2-Notes"><a href="#2-Notes" class="headerlink" title="2. Notes"></a>2. Notes</h2><p><strong>求阶乘</strong>我们可以采用高精度乘单精度的方法，不必用两个高精度乘的算法，因为哪怕1000!的阶乘已经是一个很大的数了，但是最大也不过是一个很大的数乘以1000，其中一个乘数很小，不必用高精度表示。而且用双高精度表示还会增加程序的运行时间，高精乘和高精加（特别到大数比如1000!的阶乘）真的会增加很多很多时间的消耗*_*。</p><p><strong>高精乘单精算法：</strong></p><p>设一个大数为a，一个小数为b。用a的每一位与b相乘得到一个积，结果对10取余为当前结果位，剩余的部分（取整所得）往前进位。</p><p>需要注意的是，这里每一位的进位最大达到<code>9×b</code>那么大，而不再是普通竖式乘法单位乘单位的进1。</p><p>具体可以参见<a href="https://oi-wiki.org/math/bignum" target="_blank" rel="noopener">这篇文章</a>。</p><h2 id="3-题解"><a href="#3-题解" class="headerlink" title="3. 题解"></a>3. 题解</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> t,i,j,k,n,l,carry=<span class="hljs-number">0</span>,tmp,num;<br><span class="hljs-keyword">char</span> a;<br><span class="hljs-built_in">cin</span>&gt;&gt;t;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;t;i++)&#123;<br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">fac</span><span class="hljs-params">(<span class="hljs-string">"1"</span>)</span></span>;<span class="hljs-comment">//默认置1，n为0或1不进循环也能保证结果正确</span><br>num=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;a;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">2</span>;j&lt;=n;j++)&#123; <span class="hljs-comment">//求阶乘 </span><br>l=fac.length();<br><span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;l;k++)&#123; <span class="hljs-comment">// 让每一个数与之前的积相乘 </span><br>tmp=(<span class="hljs-keyword">int</span>)(fac[k]-<span class="hljs-string">'0'</span>)*j+carry;<br>carry=tmp/<span class="hljs-number">10</span>;<br>fac[k]=(<span class="hljs-keyword">char</span>)(tmp%<span class="hljs-number">10</span>+<span class="hljs-string">'0'</span>);<br>&#125;<br><span class="hljs-keyword">while</span>(carry&gt;<span class="hljs-number">0</span>)&#123;<br>fac+=(<span class="hljs-keyword">char</span>)(carry%<span class="hljs-number">10</span>+<span class="hljs-string">'0'</span>);<br>carry/=<span class="hljs-number">10</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;fac.length();j++)&#123; <span class="hljs-comment">//统计个数</span><br><span class="hljs-keyword">if</span>(fac[j]==a)&#123;<br>num++;<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;num&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> OJ </tag>
            
            <tag> 高精度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1098字符串的展开</title>
      <link href="string-expansion-p1328-in-luogu.html"/>
      <url>string-expansion-p1328-in-luogu.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>题目过长在此展示不便。</p><p>详细内容见<a href="https://www.luogu.com.cn/problem/P1098" target="_blank" rel="noopener">原题地址</a>。</p><h2 id="2-Notes"><a href="#2-Notes" class="headerlink" title="2. Notes"></a>2. Notes</h2><h3 id="2-1-简化条件判断"><a href="#2-1-简化条件判断" class="headerlink" title="2.1. 简化条件判断"></a>2.1. 简化条件判断</h3><p>如果条件判断只需要<code>if...else...</code><strong>对立条件判断</strong>且每个子句里只有一句的话，可以考虑<code>a?b:c</code>来简化过程。</p><h3 id="2-2-理解好单元化-unit"><a href="#2-2-理解好单元化-unit" class="headerlink" title="2.2. 理解好单元化(unit)"></a>2.2. 理解好单元化(unit)</h3><p>在<a href="https://www.shenxiaojian.com/polynomial-output-p1328-in-luogu.html">洛谷P1067多项式输出</a>中说到<strong>有规律性的输出一些东西要有单元化(unit)模板化的思维</strong>。通过这个题可以再总结一下，衡量单元化的标准：</p><ol><li>每次循环相当于处理一个单元。</li><li>每个单元的结构应该是类似的，可以构造成模板。</li></ol><p>如本题中，每一个字符（字母，数字，-）可以作为一个单元，而形如<code>a-d</code>这样需要特殊处理的格式就不适合作为一个单元，因为与不需要特殊处理的普通字符格式不兼容。</p><h3 id="2-3-代码要逐步完善"><a href="#2-3-代码要逐步完善" class="headerlink" title="2.3. 代码要逐步完善"></a>2.3. 代码要逐步完善</h3><p>写代码时，对于题目中的要求，可以逐步完善，步步为营，可以一开始功能比较简陋，然后再补充，<strong>但是记得为了代码的精简，输出的位置尽量控制在同一个位置，</strong>不要有很多条件判断，对应不同的输出，这样一来代码冗长，二来即使写错了也修改不便。</p><p>比如在这个题目中，代码书写时，输出口<code>cout&lt;&lt;c</code>只留了一个，先考虑简单的由参数<code>p2</code>控制的输出个数，完成后再考虑由参数<code>p3</code>控制的是否逆序，最后才考虑由参数<code>p1</code>控制的字母大写和输出*。</p><h2 id="3-题解"><a href="#3-题解" class="headerlink" title="3. 题解"></a>3. 题解</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> p1,p2,p3,i,j,<span class="hljs-built_in">size</span>;<br><span class="hljs-built_in">string</span> str;<br><span class="hljs-built_in">cin</span>&gt;&gt;p1&gt;&gt;p2&gt;&gt;p3&gt;&gt;str;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;str.length();i++)&#123;<br><span class="hljs-keyword">if</span>(str[i]==<span class="hljs-string">'-'</span>&amp;&amp;(str[i+<span class="hljs-number">1</span>]&gt;str[i<span class="hljs-number">-1</span>])<br>&amp;&amp;((str[i<span class="hljs-number">-1</span>]&gt;=<span class="hljs-string">'0'</span>&amp;&amp;str[i+<span class="hljs-number">1</span>]&lt;=<span class="hljs-string">'9'</span>)<br>           ||(str[i<span class="hljs-number">-1</span>]&gt;=<span class="hljs-string">'a'</span>&amp;&amp;str[i+<span class="hljs-number">1</span>]&lt;=<span class="hljs-string">'z'</span>)))&#123;<br><span class="hljs-built_in">size</span>=str[i+<span class="hljs-number">1</span>]-str[i<span class="hljs-number">-1</span>]<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">char</span> c;<br>p3==<span class="hljs-number">2</span>?c=str[i+<span class="hljs-number">1</span>]:c=str[i<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">if</span>(p1==<span class="hljs-number">2</span>&amp;&amp;c&gt;=<span class="hljs-string">'a'</span>&amp;&amp;c&lt;=<span class="hljs-string">'z'</span>)&#123;<br>c-=<span class="hljs-number">32</span>; <br>&#125; <br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-built_in">size</span>;j++)&#123;<br>p3==<span class="hljs-number">2</span>?c--:c++;<br><span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;p2;k++)&#123;<br><span class="hljs-keyword">if</span>(p1==<span class="hljs-number">3</span>)&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"*"</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;c;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;str[i];<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> OJ </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1067多项式输出</title>
      <link href="polynomial-output-p1328-in-luogu.html"/>
      <url>polynomial-output-p1328-in-luogu.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>题目过长且有图表，在此展示不便。</p><p>详细内容见<a href="https://www.luogu.com.cn/problem/P1067" target="_blank" rel="noopener">原题地址</a>。</p><h2 id="2-Notes"><a href="#2-Notes" class="headerlink" title="2. Notes"></a>2. Notes</h2><p>要学会“单元化(unit)，模板化”的思维。</p><p>所谓<strong>单元化</strong>，就是最高次数为n的多项式是由n+1项组成的，那么每一个单元就是多项式的一项，<strong>单元与单元之间的结构特点是相似的</strong>。</p><p>所谓<strong>模板化</strong>，就是在单元化的基础上抓住n+1项的共同特点，造出同时适用于n+1个单元的模板，每一项都是<code>符号 数字 含x项</code>三项组成的，因此我们可以把这三项抽象成模板。但是对于不同的指数输出的情况不一样，不难分析出：</p><ol><li>符号的取值情况分为<code>+ - 无输出</code>。</li><li>数字的取值情况分为<code>直接输出 系数1非指数为0项不输出 系数1指数为0项输出</code>。</li><li>含x项取值情况分为<code>x^i形式 i=1时为x i=0时不输出</code>。</li></ol><p>我觉得以上的分类讨论思路更加简洁，如果按照最高次数项，一次项，常数项，其余项来分的话，讨论起来会比较繁琐，思考的方式太数学化，而不是计算思维。</p><p>其实这道题的本质还是让你<strong>有规律性的输出一些东西</strong>。那么要结合每个单元的特点做出整体的模板。</p><h2 id="3-题解"><a href="#3-题解" class="headerlink" title="3. 题解"></a>3. 题解</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> now,n,i;<br><span class="hljs-built_in">cin</span>&gt;&gt;n;<br><span class="hljs-keyword">for</span>(i=n;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;now;<br><span class="hljs-keyword">if</span>(now)&#123;<br><span class="hljs-comment">//符号 </span><br><span class="hljs-keyword">if</span>(now&gt;<span class="hljs-number">0</span>&amp;&amp;i!=n)&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"+"</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(now&lt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"-"</span>;<br>&#125;<br><span class="hljs-comment">//系数 </span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(now)&gt;<span class="hljs-number">1</span>)&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">abs</span>(now);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(now)&amp;&amp;i==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">abs</span>(now);<br>&#125;<br><span class="hljs-comment">//x项 </span><br><span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">1</span>)&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"x^"</span>&lt;&lt;i;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"x"</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> OJ </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1518两只塔姆沃斯牛</title>
      <link href="the-tamworth-two-p1518-in-luogu.html"/>
      <url>the-tamworth-two-p1518-in-luogu.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>emm…原题太长</p><p>详细题目描述见<a href="https://www.luogu.com.cn/problem/P1518" target="_blank" rel="noopener">原题地址</a>。</p><h2 id="2-Notes"><a href="#2-Notes" class="headerlink" title="2. Notes"></a>2. Notes</h2><h3 id="2-1-数据捆绑"><a href="#2-1-数据捆绑" class="headerlink" title="2.1. 数据捆绑"></a>2.1. 数据捆绑</h3><p>这次成功应用<a href="https://www.shenxiaojian.com/toy-puzzle-p1563-in-luogu.html">洛谷P1563玩具谜题</a>2.1中的总结，人和牛的坐标及朝向这三个数据是时刻绑在一起的，是一个整体，因此可以考虑使用结构体来表示。（面向对象%_%）</p><h3 id="2-2-模拟（建模）思维"><a href="#2-2-模拟（建模）思维" class="headerlink" title="2.2. 模拟（建模）思维"></a>2.2. 模拟（建模）思维</h3><p>一切信息和条件的表示都用数字来表示（比如该题中的方向用0，1，2，3来表示），这样可以利用数学的知识来简化处理的过程（比如通过取余来表示顺时针方向改变）。</p><p>当然，具体怎么通过数值信息表达非数值信息需要一定的技巧，慢慢积累。总之，就是将非数值化的对象数值化，再找数量之间的关系。</p><h3 id="2-3-用取余来表示循环取值的数学本质"><a href="#2-3-用取余来表示循环取值的数学本质" class="headerlink" title="2.3. 用取余来表示循环取值的数学本质"></a>2.3. 用取余来表示循环取值的数学本质</h3><p>我们知道，任何一个正数$m$，对正数$n$做取余运算$m%n$的结果一定属于${0,1,2,…,n-1}$这个集合。</p><p>因此，当我们需要在一个序列中循环取值的时候，比如对于$m,m+1,m+2,…,m+n-1$这由$n$个数组成的依次递增的序列，需要从$m$开始递增的取值，当达到$m+n-1$的时候下一个取序列中最小值$m$，那么便可以表达成</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">a = m + (a + <span class="hljs-number">1</span>) % n<br></code></pre></td></tr></table></figure><p>其中a为当前取值。</p><p>解释：(a+1)%n会在${0,1,2,…,n-1}$中取一个比a%n对应的值大1的数，但是遗憾的是只能表示从0开始计数的，而我们的序列是从$m$开始计数的，因此需要再加上$m$。</p><h3 id="2-4-读入矩阵"><a href="#2-4-读入矩阵" class="headerlink" title="2.4. 读入矩阵"></a>2.4. 读入矩阵</h3><p>只能按行从标准输入读矩阵。因此，为统一起见，今后二维数组第一位表示行，第二位表示列。有边界的，就从i=1,j=1开始读。也就是说二维数组的矩阵布局和题目中的应是一样的，只是进行了数值化处理。</p><h3 id="2-5-细节问题"><a href="#2-5-细节问题" class="headerlink" title="2.5. 细节问题"></a>2.5. 细节问题</h3><ol><li><code>switch</code>别忘了<code>break</code>。</li><li>提交时别忘了删<code>cout</code>之类的debug代码！！！</li></ol><h2 id="3-题解"><a href="#3-题解" class="headerlink" title="3. 题解"></a>3. 题解</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xy</span>&#123;</span> <span class="hljs-comment">//表示John和Cow </span><br><span class="hljs-keyword">int</span> x;<br><span class="hljs-keyword">int</span> y;<br><span class="hljs-keyword">int</span> face;<span class="hljs-comment">//朝向 0123上右下左 便于顺时针旋转取余 </span><br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">char</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">12</span>][<span class="hljs-number">12</span>];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xy</span> <span class="hljs-title">john</span>,<span class="hljs-title">cow</span>,<span class="hljs-title">tmp</span>;</span><br><span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">int</span> i,j,times=<span class="hljs-number">0</span>;<span class="hljs-comment">//i代表行 j代表列 </span><br><span class="hljs-comment">//初始化地图 </span><br><span class="hljs-built_in">memset</span>(<span class="hljs-built_in">map</span>,<span class="hljs-number">1</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">map</span>));<br><span class="hljs-comment">//录入地图数据和两点坐标 </span><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">10</span>;j++)&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;c;<br><span class="hljs-keyword">if</span>(c==<span class="hljs-string">'.'</span>)&#123;<br><span class="hljs-built_in">map</span>[i][j]=<span class="hljs-number">0</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">'C'</span>)&#123;<br>cow.x=i; cow.y=j;<br>cow.face=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">map</span>[i][j]=<span class="hljs-number">0</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">'F'</span>)&#123;<br>john.x=i; john.y=j;<br>john.face=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">map</span>[i][j]=<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">while</span>(john.x!=cow.x||john.y!=cow.y)&#123;<br><span class="hljs-comment">//直接冲，遇到障碍物再退回来 </span><br>tmp.x=john.x;tmp.y=john.y;<br><span class="hljs-keyword">switch</span>(john.face)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: john.x--; <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: john.y++; <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: john.x++; <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: john.y--;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[john.x][john.y])&#123;<br>john.x=tmp.x;john.y=tmp.y;<br>john.face=(john.face+<span class="hljs-number">1</span>)%<span class="hljs-number">4</span>;<br>&#125;<br><span class="hljs-comment">//同John </span><br>tmp.x=cow.x;tmp.y=cow.y;<br><span class="hljs-keyword">switch</span>(cow.face)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: cow.x--; <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: cow.y++; <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: cow.x++; <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: cow.y--;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[cow.x][cow.y])&#123;<br>cow.x=tmp.x;cow.y=tmp.y;<br>cow.face=(cow.face+<span class="hljs-number">1</span>)%<span class="hljs-number">4</span>;<br>&#125;<br><br>times++;<br><span class="hljs-keyword">if</span>(times&gt;=<span class="hljs-number">600000</span>)&#123; <span class="hljs-comment">//次数足够大退出，骗分$_$ </span><br>times=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;times;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> OJ </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1328生活大爆炸版石头剪刀布</title>
      <link href="big-bang-version-rock-scissors-p1328-in-luogu.html"/>
      <url>big-bang-version-rock-scissors-p1328-in-luogu.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>题目过长且有图表，在此展示不便。</p><p>详细内容见<a href="https://www.luogu.com.cn/problem/P1328" target="_blank" rel="noopener">原题地址</a>。</p><h2 id="2-Notes"><a href="#2-Notes" class="headerlink" title="2. Notes"></a>2. Notes</h2><ol><li><p>这题在传统的石头剪刀布上又增加了两种情况，如果单纯的用<code>if</code>条件判断，代码将会非常长，而且有可能会有疏忽。因此，一种简单的思路就是制作得分表，正如题目中的那张，<strong>需要注意的是，制作表时已经要分清楚谁相对与谁的结果</strong>，比如题目中的表就是甲相对于乙的结果。</p></li><li><p>第1条也启发我们，今后遇到需要很多条件判断时，可以考虑制表来解决，<strong>制表一时累，然后一直爽。</strong></p></li><li><p>得分表只需存储<code>0</code>和<code>1</code>用来表示输赢，因此建议用<code>char型二维数组</code>，可以省空间。</p></li><li><p>一种比较优雅的初始化表的方式：（引用别人的，不用在意数据，这种形式码代码的时候应该会更加省力）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> vs[<span class="hljs-number">5</span>][<span class="hljs-number">5</span>] = <br>&#123;&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,<br> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,<br> &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;,<br> &#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;,<br> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;&#125;; <span class="hljs-comment">//得分表的处理</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="3-题解"><a href="#3-题解" class="headerlink" title="3. 题解"></a>3. 题解</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> s1=<span class="hljs-number">0</span>,s2=<span class="hljs-number">0</span>,N,n1,n2,i,t1,t2;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">201</span>],b[<span class="hljs-number">201</span>];<br><span class="hljs-keyword">char</span> r[<span class="hljs-number">5</span>][<span class="hljs-number">5</span>];<br><span class="hljs-built_in">memset</span>(r,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(r));<br>r[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]=r[<span class="hljs-number">0</span>][<span class="hljs-number">3</span>]<br>=r[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=r[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>]<br>=r[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>]=r[<span class="hljs-number">2</span>][<span class="hljs-number">4</span>]<br>=r[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>]=r[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>]<br>=r[<span class="hljs-number">4</span>][<span class="hljs-number">0</span>]=r[<span class="hljs-number">4</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">cin</span>&gt;&gt;N&gt;&gt;n1&gt;&gt;n2;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n1;i++) <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n2;i++) <span class="hljs-built_in">cin</span>&gt;&gt;b[i];<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;N;i++)&#123;<br>t1=a[i%n1];<br>t2=b[i%n2];<br><span class="hljs-keyword">if</span>(t1!=t2)&#123;<br><span class="hljs-keyword">if</span>(r[t1][t2])&#123;<br>s1++;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>s2++;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;s1&lt;&lt;<span class="hljs-string">" "</span>&lt;&lt;s2;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> OJ </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1009阶乘之和</title>
      <link href="sum-of-factorials-p1009-in-luogu.html"/>
      <url>sum-of-factorials-p1009-in-luogu.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>用高精度计算出$S=1!+2!+3!+…+n! (n≤50)$</p><p>其中“!”表示阶乘，例如：$5!=5×4×3×2×1$。</p><h2 id="2-Notes"><a href="#2-Notes" class="headerlink" title="2. Notes"></a>2. Notes</h2><h2 id="2-1-思路"><a href="#2-1-思路" class="headerlink" title="2.1. 思路"></a>2.1. 思路</h2><p>题目是给定一个$n$，让求从$n$的阶乘加到$1$的阶乘，考虑到$n!=n*(n-1)!$，我们可以先从1的阶乘开始算起，这样计算下一个阶乘的时候，前面计算出的阶乘可以直接拿来用。</p><p>因此，算法的思路就是先用高精乘计算出从1到n每个数的阶乘，然后将其存到string数组中，每一个单位存一个阶乘。然后再利用高精加对他们求和。</p><h2 id="2-2-犯错的点"><a href="#2-2-犯错的点" class="headerlink" title="2.2. 犯错的点"></a>2.2. 犯错的点</h2><ol><li>高精加的时候，对string类<code>+</code>的重载拼接字符串不是太搞得明白，有时候会抽风，建议还是append()吧。</li><li>高精乘$a*b$的时候，记得考虑$b$的每一位都与$a$乘完后可能有进位，另外记得除去开头多余的0。</li></ol><h2 id="2-3-经验点"><a href="#2-3-经验点" class="headerlink" title="2.3. 经验点"></a>2.3. 经验点</h2><p>做循环的时候，虽然要考虑循环中的一般情况，但也要考虑好循环开始和结束的位置的特殊情况，注意每一个能注意到的细节。</p><h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-built_in">string</span>&amp;a,<span class="hljs-built_in">string</span> b)</span></span>; <span class="hljs-comment">//结果保存在第一位</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">multiply</span><span class="hljs-params">(<span class="hljs-built_in">string</span>&amp;a,<span class="hljs-built_in">string</span> b)</span></span>; <span class="hljs-comment">//结果保存在第一位</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>     <span class="hljs-keyword">int</span> N,i,j;<br>     <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">result</span><span class="hljs-params">(<span class="hljs-string">"0"</span>)</span></span>;<br>     <span class="hljs-built_in">string</span> tmp;<br>     <span class="hljs-built_in">string</span> sv[<span class="hljs-number">52</span>];<br>     sv[<span class="hljs-number">0</span>]=<span class="hljs-string">"1"</span>;<br>     <span class="hljs-built_in">cin</span>&gt;&gt;N;<br>     <span class="hljs-comment">//先获得所有的阶乘</span><br>     <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=N;i++)&#123;<br>      tmp=<span class="hljs-string">""</span>;<br>      j=i;<br>         <span class="hljs-keyword">while</span>(j)&#123;<br>         tmp=tmp+(<span class="hljs-keyword">char</span>)((j%<span class="hljs-number">10</span>)+<span class="hljs-string">'0'</span>);<br>         j/=<span class="hljs-number">10</span>;         <br> &#125;<br> reverse(tmp.<span class="hljs-built_in">begin</span>(),tmp.<span class="hljs-built_in">end</span>());<br> <br>         multiply(tmp,sv[i<span class="hljs-number">-1</span>]);<br>         sv[i]=tmp;<br>     &#125;<br>     <span class="hljs-comment">//再相加</span><br>     <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;=N;i++)&#123;<br>         add(sv[<span class="hljs-number">1</span>],sv[i]);<br>     &#125;<br>     <span class="hljs-built_in">cout</span>&lt;&lt;sv[<span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-built_in">string</span>&amp;a,<span class="hljs-built_in">string</span> b)</span></span>&#123;<br>    reverse(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>());<br>    reverse(b.<span class="hljs-built_in">begin</span>(),b.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">int</span> m = a.length();<br>    <span class="hljs-keyword">int</span> n = b.length();<br>    <span class="hljs-keyword">int</span> i,tmp,carry=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(m&lt;n)&#123;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n-m;i++)&#123;<br>            a=a+<span class="hljs-string">'0'</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;m-n;i++)&#123;<br>            b=b+<span class="hljs-string">'0'</span>;<br>        &#125;<br>        n=m;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        tmp=a[i]-<span class="hljs-string">'0'</span>+b[i]-<span class="hljs-string">'0'</span>+carry;<br>        carry=tmp/<span class="hljs-number">10</span>;<br>        a[i]=(<span class="hljs-keyword">char</span>)(tmp%<span class="hljs-number">10</span>+<span class="hljs-string">'0'</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(carry&gt;<span class="hljs-number">0</span>)&#123;<br>        a.append(<span class="hljs-string">"1"</span>);<br>    &#125;<br>    reverse(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>());<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">multiply</span><span class="hljs-params">(<span class="hljs-built_in">string</span>&amp;a,<span class="hljs-built_in">string</span> b)</span></span>&#123;<br><span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]==<span class="hljs-string">'0'</span> <span class="hljs-keyword">or</span> b[<span class="hljs-number">0</span>]==<span class="hljs-string">'0'</span>)&#123;<br>a=<span class="hljs-string">'0'</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>reverse(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>());<br>    reverse(b.<span class="hljs-built_in">begin</span>(),b.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">int</span> m = a.length();<br>    <span class="hljs-keyword">int</span> n = b.length();<br>    <span class="hljs-built_in">string</span> sv[n];<br>    <span class="hljs-keyword">int</span> i,j,k,tmp,carry=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    carry=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>            tmp=(a[j]-<span class="hljs-string">'0'</span>)*(b[i]-<span class="hljs-string">'0'</span>)+carry;<br>            sv[i]=sv[i]+(<span class="hljs-keyword">char</span>)((tmp%<span class="hljs-number">10</span>)+<span class="hljs-string">'0'</span>);<br>            carry=tmp/<span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(carry&gt;<span class="hljs-number">0</span>)&#123;<br>        sv[i]=sv[i]+(<span class="hljs-keyword">char</span>)(carry+<span class="hljs-string">'0'</span>);<br>&#125;<br>        <span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;i;k++)&#123;<br>            sv[i]=<span class="hljs-string">'0'</span>+sv[i];<br>        &#125;<br>        reverse(sv[i].<span class="hljs-built_in">begin</span>(),sv[i].<span class="hljs-built_in">end</span>());<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>        add(sv[<span class="hljs-number">0</span>],sv[i]);<br>    &#125;<br>    a=sv[<span class="hljs-number">0</span>];<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> OJ </tag>
            
            <tag> 高精度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1303高精度A×B</title>
      <link href="product-of-high-precision-a-and-b-p1303-in-luogu.html"/>
      <url>product-of-high-precision-a-and-b-p1303-in-luogu.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>求两数的积。每个数字不超过10的2000次方，需用高精。</p><h2 id="2-Notes"><a href="#2-Notes" class="headerlink" title="2. Notes"></a>2. Notes</h2><ol><li><p>本题模拟的是竖式乘法运算，算出每一位与大数的乘积再错位相加。</p></li><li><p>竖式乘法的原理：<br>比如12345×1234=12345×(1000+200+30+4)，我们平时列竖式的时候只是把最后几位的0省去了。这样就将两个大数相乘转化为一个大数乘以一个一位数字再相加。</p></li><li><p><strong>用string类对象赋值时要注意的地方</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">  <span class="hljs-built_in">string</span> str[<span class="hljs-number">10</span>]; <span class="hljs-comment">//定义一个10个大小的string对象数组</span><br>  str[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-string">'a'</span>; <br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">按上述方法赋值，str[1]这个字符串第一个字符不是a，输出str[1]为空串</span><br><span class="hljs-comment">  因为str[1][0]这个位置还没有分配，所以为空</span><br><span class="hljs-comment">  若想赋值按下述方法对str[1]这个字符串级别的变量进行赋值</span><br><span class="hljs-comment">  不要对还没分配空间的字符字符级别进行赋值（如此处的str[1][0]）</span><br><span class="hljs-comment">  */</span><br>  str[<span class="hljs-number">1</span>].append(<span class="hljs-string">"a"</span>);<br>  str[<span class="hljs-number">1</span>]=str[<span class="hljs-number">1</span>]+<span class="hljs-string">'a'</span>;<br></code></pre></td></tr></table></figure></li><li><p>高精乘思路：</p><ol><li>$a,b$中有0直接返回0，否则将$a,b$倒置。</li><li>模拟竖式乘法，假设$a$在上方，$b$在下方，用$b$的每一位与$a$相乘再加上来自低位的进位，取余取整分别作为该位的值和进位。</li><li>$b$的中的一位与$a$中每一位乘完仍然有可能有进位，记得检验。（乘法中每一位的进位不超过9）。</li><li>按照当前$b$中数字所在的位数进行补0。</li><li>调用高精加求和即可。</li></ol></li></ol><h2 id="3-题解"><a href="#3-题解" class="headerlink" title="3. 题解"></a>3. 题解</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a,<span class="hljs-built_in">string</span> b)</span></span>; <span class="hljs-comment">//高精度加法由P1601得、略微修改</span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">string</span> a,b,result;<br><span class="hljs-keyword">int</span> m,n,carry,i,j,k,p;<br><span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;<br><span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]==<span class="hljs-string">'0'</span> <span class="hljs-keyword">or</span> b[<span class="hljs-number">0</span>]==<span class="hljs-string">'0'</span>)&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">0</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;  <span class="hljs-comment">//最高位不为0，结果最高位一定不为0</span><br>reverse(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>());<br>reverse(b.<span class="hljs-built_in">begin</span>(),b.<span class="hljs-built_in">end</span>());<br>m=a.length();<br>n=b.length();<br><span class="hljs-built_in">string</span> sv[n];<br>carry=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>p=(<span class="hljs-keyword">int</span>)(a[j]-<span class="hljs-string">'0'</span>)*(<span class="hljs-keyword">int</span>)(b[i]-<span class="hljs-string">'0'</span>);<br>p+=carry;<br>sv[i]=sv[i]+(<span class="hljs-keyword">char</span>)((p%<span class="hljs-number">10</span>)+<span class="hljs-string">'0'</span>);<br>carry=p/<span class="hljs-number">10</span>;<br>&#125;<br>            <span class="hljs-keyword">if</span>(carry&gt;<span class="hljs-number">0</span>)&#123;<br>        sv[i]=sv[i]+(<span class="hljs-keyword">char</span>)(carry+<span class="hljs-string">'0'</span>);<br>&#125;<br><span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;i;k++)&#123;<br>sv[i]=<span class="hljs-string">'0'</span>+sv[i];<br>&#125;<br>&#125;<br>result=sv[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>result=add(result,sv[i]);<br>&#125;<br><br>reverse(result.<span class="hljs-built_in">begin</span>(),result.<span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">cout</span>&lt;&lt;result;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a,<span class="hljs-built_in">string</span> b)</span></span>&#123;<br><span class="hljs-keyword">int</span> m,n,i,tmp,carry;<br>carry=<span class="hljs-number">0</span>;<br>m=a.length();<br>n=b.length();<br><span class="hljs-keyword">if</span>(m&gt;n)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;(m-n);j++)&#123;<br>b=b+<span class="hljs-string">'0'</span>;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n&gt;m)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;(n-m);j++)&#123;<br>a=a+<span class="hljs-string">'0'</span>;<br>&#125;<br>m=n; <span class="hljs-comment">//赋值语句看清位置 </span><br>&#125;<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>tmp=a[i]-<span class="hljs-string">'0'</span>+b[i]-<span class="hljs-string">'0'</span>+carry;<br>carry=tmp/<span class="hljs-number">10</span>;<br>tmp=tmp%<span class="hljs-number">10</span>;<br>a[i]=(<span class="hljs-keyword">char</span>)(tmp+<span class="hljs-string">'0'</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(carry&gt;<span class="hljs-number">0</span>)&#123;<br>a=a+<span class="hljs-string">'1'</span>;<br>&#125;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> OJ </tag>
            
            <tag> 高精度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1601高精度A+B</title>
      <link href="sum-of-high-precision-a-and-b-p1601-in-luogu.html"/>
      <url>sum-of-high-precision-a-and-b-p1601-in-luogu.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>高精度加法,相当于a+b problem，<strong>不用考虑负数</strong>.</p><h2 id="2-Notes"><a href="#2-Notes" class="headerlink" title="2. Notes"></a>2. Notes</h2><ol><li><p>整数与字符的转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//1位非负数转字符（数字2变成字符2）</span><br><span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">char</span> b = a + <span class="hljs-string">'0'</span>;<br><span class="hljs-comment">//1位字符转非负数（字符3变为数字3）</span><br><span class="hljs-keyword">char</span> b = <span class="hljs-string">'3'</span>;<br><span class="hljs-keyword">int</span> a = b - <span class="hljs-string">'0'</span>;<br></code></pre></td></tr></table></figure><p>说明：字符2在计算机内部存的是其<code>Ascii码</code>，而数值2在计算机内部存的就是2，因此需要加减转化。</p></li><li><p>处理字符串时试着去尝试用<code>string类</code>，<code>string</code>的每一个基本单元时<code>char</code>。</p></li><li><p>字符串倒置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// a为1个string对象</span><br>reverse(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>());<br></code></pre></td></tr></table></figure></li><li><p>考虑问题要从特殊到一般，不要上来就考虑一般的问题，觉得特殊的简单不想考虑。特殊的搞定了，就可以把一般的转化为特殊的，或者与之建立某种关系，问题也就解决了。如本题中，先考虑两个数位数相等的情况。</p></li><li><p>加一行代码的时候，把附近的句子都看一下，在脑子里跑一遍，看看有没有问题，不要想到什么就加什么。</p></li><li><p>高精加思路：</p><ol><li>每个数先倒置，</li><li>对位数短的数补零</li><li>从数组第一位开始加，每位都要考虑来自低位的进位，然后分别取余取整来确定计算后该位的数值和要进位的数值。</li><li>最后记得，加完仍然有可能有进位，记得检验（加法中进位最大为1）。</li></ol></li></ol><h2 id="3-题解"><a href="#3-题解" class="headerlink" title="3. 题解"></a>3. 题解</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">string</span> a,b;<br><span class="hljs-keyword">int</span> carry=<span class="hljs-number">0</span>,i,m,n;<br><span class="hljs-keyword">int</span> tmp;<br><span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;<br>reverse(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>());<br>reverse(b.<span class="hljs-built_in">begin</span>(),b.<span class="hljs-built_in">end</span>());<br>m=a.length();<br>n=b.length();<br>    <span class="hljs-comment">//位数少的补0，一般化特殊</span><br><span class="hljs-keyword">if</span>(m&gt;n)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;(m-n);j++)&#123;<br>b=b+<span class="hljs-string">'0'</span>;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n&gt;m)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;(n-m);j++)&#123;<br>a=a+<span class="hljs-string">'0'</span>;<br>&#125;<br>m=n; <span class="hljs-comment">//赋值语句看清位置 </span><br>&#125;<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>tmp=a[i]-<span class="hljs-string">'0'</span>+b[i]-<span class="hljs-string">'0'</span>+carry;<br>carry=tmp/<span class="hljs-number">10</span>;<br>tmp=tmp%<span class="hljs-number">10</span>;<br>a[i]=(<span class="hljs-keyword">char</span>)(tmp+<span class="hljs-string">'0'</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(carry&gt;<span class="hljs-number">0</span>)&#123;<br>a=a+<span class="hljs-string">'1'</span>;<br>&#125;<br>reverse(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">cout</span>&lt;&lt;a;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> OJ </tag>
            
            <tag> 高精度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLServer中触发器与自定义函数的定义与调用</title>
      <link href="the-definition-and-call-of-triggers-and-custom-functions-in-sql%20server.html"/>
      <url>the-definition-and-call-of-triggers-and-custom-functions-in-sql%20server.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-触发器"><a href="#1-触发器" class="headerlink" title="1. 触发器"></a>1. 触发器</h2><h2 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1. 定义"></a>1.1. 定义</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> trigger_name <span class="hljs-keyword">on</span> table_name <span class="hljs-keyword">for</span> manipulation<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> @variable1 data_type1, @variable2 data_type2 <br><span class="hljs-keyword">select</span> @variable1=variable1,@variable2=variable2 <span class="hljs-keyword">from</span> inserted<br><span class="hljs-keyword">select</span> @Variable1=variable1,@variable2=variable2 <span class="hljs-keyword">from</span> deleted<br>%条件语句或循环语句(过程化<span class="hljs-keyword">SQL</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>说明：</p><p>以上<code>trigger_name</code>、<code>table_name</code>、<code>manipulation</code>、 <code>variable</code>、<code>data_type</code>按实际需要替换。其中<code>manipulation</code>包括<code>insert</code>、<code>delete</code>、<code>update</code>。</p><p>注意对<code>inserted</code>和<code>deleted</code>这两张表的使用。</p><h3 id="1-2-调用"><a href="#1-2-调用" class="headerlink" title="1.2. 调用"></a>1.2. 调用</h3><p>由DBMS自动调用。</p><h2 id="2-自定义函数"><a href="#2-自定义函数" class="headerlink" title="2. 自定义函数"></a>2. 自定义函数</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1. 定义"></a>2.1. 定义</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> function_name(arg1,arg2) <span class="hljs-keyword">returns</span> <span class="hljs-keyword">table</span><br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">return</span>(<br>%<span class="hljs-keyword">select</span>子句<br>)<br></code></pre></td></tr></table></figure><p>说明：以上<code>function_name</code>、<code>arg</code>（可以为空）按实际需要替换。因自定义函数最常用的返回类型就是<code>table</code>，这里就以此为例。</p><h2 id="2-2-调用"><a href="#2-2-调用" class="headerlink" title="2.2. 调用"></a>2.2. 调用</h2><p>2.1中自定义函数返回的是一张表，因此，通过select子句即可完成调用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> function_name()<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1563玩具谜题</title>
      <link href="toy-puzzle-p1563-in-luogu.html"/>
      <url>toy-puzzle-p1563-in-luogu.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>有 n个玩具小人围成一圈, 已知它们的职业和朝向。现在第1个玩具小人告诉小南一个包含m条指令的谜題, 其中第 z条指令形如“左数/右数第s,个玩具小人”。 你需要输出依次数完这些指令后,到达的玩具小人的职业。</p><p>详细题目描述见<a href="https://www.luogu.com.cn/problem/P1563" target="_blank" rel="noopener">原题地址</a>。</p><h2 id="2-Notes"><a href="#2-Notes" class="headerlink" title="2. Notes"></a>2. Notes</h2><ol><li><p>如果两个要存储的量<code>一直</code>要绑定在一起，可以考虑用结构体，如本题中的<code>朝向</code>和<code>移动步数</code>，数据处理起来更简单。</p></li><li><p><code>cin</code>忽略空格，回车等空白字符。</p></li><li><p>写OJ时一个通用的头文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br></code></pre></td></tr></table></figure><p>包含所有的标准库，不用再操心头文件的事情。</p></li><li><p>围成一圈，无论题目转的条件怎么花里胡哨，也就是只有两种情况，一种是顺时针，一种是逆时针。因此只需找到顺时针的条件或逆时针的条件即可，另一个else即可。如题解中的<code>nd[tmp].f==p</code>。</p></li><li><p>取余是为了在圈内，但是只有一个方向可以用，另一个方向要用总数去减，因为在C++中负数取余是负数，就出圈了。</p></li></ol><h2 id="3-题解"><a href="#3-题解" class="headerlink" title="3. 题解"></a>3. 题解</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br><span class="hljs-keyword">bool</span> f;<br><span class="hljs-built_in">string</span> name;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> <span class="hljs-title">nd</span>[100003];</span><br><span class="hljs-keyword">int</span> n,m,i,j,tmp,p,q;<br><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m; <br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;nd[i].f&gt;&gt;nd[i].name; <br>&#125;<br><br>tmp=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;p&gt;&gt;q;<br><span class="hljs-keyword">if</span>(nd[tmp].f==p)&#123; <span class="hljs-comment">//逆时针</span><br>tmp = (tmp+n-q)%n;<br>&#125;<span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">//顺时针</span><br>tmp = (tmp+q)%n;<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;nd[tmp].name;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> OJ </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P2670扫雷游戏</title>
      <link href="mine-sweeper-p2670-in-luogu.html"/>
      <url>mine-sweeper-p2670-in-luogu.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>扫雷游戏是一款十分经典的单机小游戏。在n行m列的雷区中有一些格子含有地雷（称之为地雷格），其他格子不含地雷（称之为非地雷格）。玩家翻开一个非地雷格时，该格将会出现一个数字——提示周围格子中有多少个是地雷格。游戏的目标是在不翻出任何地雷格的条件下，找出所有的非地雷格。</p><p>现在给出n行m列的雷区中的地雷分布，要求计算出每个非地雷格周围的地雷格数。</p><p>注：一个格子的周围格子包括其上、下、左、右、左上、右上、左下、右下八个方向上与之直接相邻的格子。</p><p>详细内容见<a href="https://www.luogu.com.cn/problem/P2670" target="_blank" rel="noopener">原题地址</a>。</p><h2 id="2-Notes"><a href="#2-Notes" class="headerlink" title="2. Notes"></a>2. Notes</h2><ol><li>即使矩阵的大小不确定，但一般也无需动态生成，因为题目会告诉我们一个范围（比如该题中0&lt;=m,n&lt;=100），只需要把矩阵按最大范围生成即可，m,n用来控制矩阵的有效范围（i,j的移动范围）而不是负责动态生成矩阵。</li><li>为了防止统计时溢出，数据不要从(0,0)开始存储</li><li>抽象能力有待提高，题目给我一个由*和?组成的矩阵，我就原样的构造了这样一个矩阵，虽然也没做错，但是没有抓住问题的本质，代码繁琐，今后构造矩阵的时候要多思考。<br>问题要求我们输出的矩阵是如果当前位置是*就原样输出，如果不是*就统计周围*的个数，*只是一个符号而已，重要的是<code>是*</code>和<code>不是*</code>这组对立的<code>是</code>与<code>不是</code>，完全可以用<code>1</code>和<code>0</code>来表示，而且便于统计*的个数，直接相加即可。（具体代码见3.2）</li></ol><h2 id="3-题解"><a href="#3-题解" class="headerlink" title="3. 题解"></a>3. 题解</h2><h3 id="3-1-原题解"><a href="#3-1-原题解" class="headerlink" title="3.1. 原题解"></a>3.1. 原题解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> m,n,i,j;<br><span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> sv[<span class="hljs-number">102</span>][<span class="hljs-number">102</span>]; <br><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n+<span class="hljs-number">2</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;m+<span class="hljs-number">2</span>;j++)&#123;<br><span class="hljs-keyword">if</span>((i==<span class="hljs-number">0</span>)||(i==n+<span class="hljs-number">1</span>)||(j==<span class="hljs-number">0</span>)||(j==m+<span class="hljs-number">1</span>))&#123;<br>sv[i][j]=<span class="hljs-string">'$'</span>;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-built_in">cin</span>&gt;&gt;sv[i][j];<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;n+<span class="hljs-number">1</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;m+<span class="hljs-number">1</span>;j++)&#123;<br>count=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(sv[i][j]==<span class="hljs-string">'*'</span>)&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">'*'</span>;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(sv[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]==<span class="hljs-string">'*'</span>)&#123;<br>count++;<br>&#125;<br><span class="hljs-keyword">if</span>(sv[i<span class="hljs-number">-1</span>][j]==<span class="hljs-string">'*'</span>)&#123;<br>count++;<br>&#125;<br><span class="hljs-keyword">if</span>(sv[i<span class="hljs-number">-1</span>][j+<span class="hljs-number">1</span>]==<span class="hljs-string">'*'</span>)&#123;<br>count++;<br>&#125;<br><span class="hljs-keyword">if</span>(sv[i][j<span class="hljs-number">-1</span>]==<span class="hljs-string">'*'</span>)&#123;<br>count++;<br>&#125;<br><span class="hljs-keyword">if</span>(sv[i][j+<span class="hljs-number">1</span>]==<span class="hljs-string">'*'</span>)&#123;<br>count++;<br>&#125;<br><span class="hljs-keyword">if</span>(sv[i+<span class="hljs-number">1</span>][j<span class="hljs-number">-1</span>]==<span class="hljs-string">'*'</span>)&#123;<br>count++;<br>&#125;<br><span class="hljs-keyword">if</span>(sv[i+<span class="hljs-number">1</span>][j]==<span class="hljs-string">'*'</span>)&#123;<br>count++;<br>&#125;<br><span class="hljs-keyword">if</span>(sv[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]==<span class="hljs-string">'*'</span>)&#123;<br>count++;<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;count;<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-改进后"><a href="#3-2-改进后" class="headerlink" title="3.2. 改进后"></a>3.2. 改进后</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> m,n,i,j;<br><span class="hljs-keyword">bool</span> sv[<span class="hljs-number">102</span>][<span class="hljs-number">102</span>];<br><span class="hljs-keyword">char</span> c;<br><span class="hljs-built_in">memset</span>(sv,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(sv));<span class="hljs-comment">//置零 </span><br><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;n+<span class="hljs-number">1</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;m+<span class="hljs-number">1</span>;j++)&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;c;<br><span class="hljs-keyword">if</span>(c==<span class="hljs-string">'*'</span>)&#123;<br>sv[i][j]=<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;n+<span class="hljs-number">1</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;m+<span class="hljs-number">1</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(sv[i][j]==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">'*'</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;(sv[i][j<span class="hljs-number">-1</span>]+sv[i][j+<span class="hljs-number">1</span>]<br>                       +sv[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+sv[i<span class="hljs-number">-1</span>][j]+sv[i<span class="hljs-number">-1</span>][j+<span class="hljs-number">1</span>]<br>                       +sv[i+<span class="hljs-number">1</span>][j<span class="hljs-number">-1</span>]+sv[i+<span class="hljs-number">1</span>][j]+sv[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]);<br>&#125; <br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> OJ </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1042乒乓球</title>
      <link href="pingpang-ball-p1008-in-luogu.html"/>
      <url>pingpang-ball-p1008-in-luogu.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>华华通过以下方式进行分析，首先将比赛每个球的胜负列成一张表，然后分别计算在11分制和21分制下，双方的比赛结果（截至记录末尾）。</p><p>比如现在有这么一份记录，（其中<code>W</code>表示华华获得一分，<code>L</code>表示华华对手获得一分）：</p><p>WWWWWWWWWWWWWWWWWWWWWWLW</p><p>在1111分制下，此时比赛的结果是华华第一局11比0获胜，第二局11比0获胜，正在进行第三局，当前比分1比1。而在21分制下，此时比赛结果是华华第一局21比0获胜，正在进行第二局，比分2比1。如果一局比赛刚开始，则此时比分为0比0。直到分差大于或者等于2，才一局结束。</p><p>你的程序就是要对于一系列比赛信息的输入（WL形式），输出正确的结果。</p><h2 id="2-Notes"><a href="#2-Notes" class="headerlink" title="2. Notes"></a>2. Notes</h2><h3 id="2-1-关于题目中的读取文件"><a href="#2-1-关于题目中的读取文件" class="headerlink" title="2.1. 关于题目中的读取文件"></a>2.1. 关于题目中的读取文件</h3><p>OJ不需要“实质性”的文件读入，即他说读取数据时其实就是通过标准输入(e.g. cin)来实现。而且只要是读取就<code>一定有终止符</code>。</p><h3 id="2-2-关于while-cin-gt-gt-x-输入的理解"><a href="#2-2-关于while-cin-gt-gt-x-输入的理解" class="headerlink" title="2.2. 关于while(cin&gt;&gt;x)输入的理解"></a>2.2. 关于while(cin&gt;&gt;x)输入的理解</h3><p>可以类似于<code>a+b</code> 进行理解，<code>cin</code>是一个标准输入流对象，<code>&gt;&gt;</code>是一个运算符，<code>cin&gt;&gt;x</code>的意思就是<code>cin</code>和<code>x</code>进行运算符为<code>&gt;&gt;</code>的运算，得到的结果还是一个标准输入流对象，即还是<code>cin</code>这个对象，一般都是非0值(true)，除非下一个字符是<code>EOF</code>。</p><p>注：windows系统下<code>EOF</code>为<code>ctrl+z</code>，Linux系统下为<code>ctrl+d</code>。</p><h3 id="2-3-书写规范用好小括号"><a href="#2-3-书写规范用好小括号" class="headerlink" title="2.3. 书写规范用好小括号"></a>2.3. 书写规范用好小括号</h3><p>每一组逻辑运算一定要<code>严格地加好括号</code>，不要怕麻烦，如果因为表意不清程序可以运行但就是不是自己想要的结果，debug起来将很困难，因为你可能觉得自己就是对的（实际上可能你逻辑也就是对的，但由于你的表达不规范，编译器理解错了）。</p><h3 id="2-4-关于break和continue"><a href="#2-4-关于break和continue" class="headerlink" title="2.4. 关于break和continue"></a>2.4. 关于break和continue</h3><p><code>break</code>和<code>continue</code>会找到距离他最近的且他能影响的一个关键词去影响。</p><p>比如，最常见的就是循环，如果一个循环里面套两层if(类似于while(if(if break)))，在最内层的if中执行break或continue影响的是据他最近且他能影响到的关键词（此例中就是直接终止while循环，剩下的代码<code>全部不执行</code>）</p><h3 id="2-5-少用unsigned"><a href="#2-5-少用unsigned" class="headerlink" title="2.5. 少用unsigned"></a>2.5. 少用unsigned</h3><p>即使你要用该变量表达的数全是非负数也要慎重考虑，除非你能保证他不会和其余的数做减法，得到一个小于0的数无法表示而溢出！（如题解中的a，b）</p><h3 id="2-6-拆题目马甲"><a href="#2-6-拆题目马甲" class="headerlink" title="2.6. 拆题目马甲"></a>2.6. 拆题目马甲</h3><p>乒乓球11分制比赛中，一局比赛结束，要求两人中<code>至少一人拿到11分</code>，且<code>两人分差大于等于两分</code>。</p><h2 id="3-题解"><a href="#3-题解" class="headerlink" title="3. 题解"></a>3. 题解</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">char</span> sv[<span class="hljs-number">62520</span>]; <span class="hljs-comment">//25*2500 输入文件的说明有说明</span><br>    <span class="hljs-keyword">int</span> a,b,i;<br>    a=b=i=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//因为要用两次，用数组存起来</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;c &amp;&amp; c != <span class="hljs-string">'E'</span>)&#123;<br>        sv[i] = c;<br>        i++;<br>    &#125;<br>    sv[i] = <span class="hljs-string">'E'</span>;<br><br>    i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(sv[i] !=<span class="hljs-string">'E'</span>)&#123;<br>        <span class="hljs-keyword">if</span>(sv[i]==<span class="hljs-string">'W'</span>)&#123;<br>            a++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sv[i]==<span class="hljs-string">'L'</span>)&#123;<br>        b++;          <br>        &#125;<br>        i++;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(a-b)&gt;<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">if</span>(a&gt;=<span class="hljs-number">11</span> <span class="hljs-keyword">or</span> b&gt;=<span class="hljs-number">11</span>)&#123;<br>                <span class="hljs-built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">":"</span>&lt;&lt;b&lt;&lt;<span class="hljs-built_in">endl</span>;<br>            a=<span class="hljs-number">0</span>;b=<span class="hljs-number">0</span>;<br>            &#125; <br>        &#125;<br>    &#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">":"</span>&lt;&lt;b&lt;&lt;<span class="hljs-built_in">endl</span>;<br>a=<span class="hljs-number">0</span>;b=<span class="hljs-number">0</span>;<br><br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><br>    i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(sv[i] !=<span class="hljs-string">'E'</span>)&#123;<br>        <span class="hljs-keyword">if</span>(sv[i] == <span class="hljs-string">'W'</span>)&#123;<br>            a++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sv[i] ==<span class="hljs-string">'L'</span>)&#123;<br>            b++;<br>        &#125;<br>        i++;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(a-b)&gt;<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">if</span>(a&gt;=<span class="hljs-number">21</span> <span class="hljs-keyword">or</span> b&gt;=<span class="hljs-number">21</span>)&#123;<br>                <span class="hljs-built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">":"</span>&lt;&lt;b&lt;&lt;<span class="hljs-built_in">endl</span>;<br>            a=<span class="hljs-number">0</span>;b=<span class="hljs-number">0</span>;<br>            &#125; <br>        &#125;<br>    &#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">":"</span>&lt;&lt;b&lt;&lt;<span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> OJ </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1008三连击</title>
      <link href="triple-combo-p1008-in-luogu.html"/>
      <url>triple-combo-p1008-in-luogu.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>将1,2, … ,9共9个数分成3组，分别组成3个三位数，且使这3个三位数构成1:2:3的比例，试求出所有满足条件的3个三位数。</p><h2 id="2-Notes"><a href="#2-Notes" class="headerlink" title="2. Notes"></a>2. Notes</h2><ol><li><p>不要怕浪费一些空间资源和运算资源，不必太苛责</p></li><li><p>两个条件判断（本题中为判断a,b,c是否同时满足a:b:c=1:2:3 和 a，b，c三个数每一位是否能凑齐1-9九个数<br>可将其中一个条件判断直接转化为条件使用，缩小查找的范围（一般用简单的条件）比如该题直接令b=2<em>a,c=3</em>a;</p></li><li><p>判断9个数是否都不一样可以先设置9个数字，然后让得到的数字去“点亮”自己的位置（false-&gt;true)</p></li></ol><h2 id="2-题解"><a href="#2-题解" class="headerlink" title="2. 题解"></a>2. 题解</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a,b,c,i,tmp;<br>    <span class="hljs-keyword">bool</span> f[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">bool</span> flag;<br>    <span class="hljs-keyword">for</span>(a = <span class="hljs-number">123</span>;a &lt;= <span class="hljs-number">329</span>;a++)&#123;<br>        flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>            f[i] = <span class="hljs-literal">false</span>;<br>        &#125;<br>        b = <span class="hljs-number">2</span>*a;<br>        c = <span class="hljs-number">3</span>*a;<br><br>        <span class="hljs-comment">//开始检验</span><br>        tmp = a;<br>        <span class="hljs-keyword">while</span>(tmp)&#123;<br>            f[tmp%<span class="hljs-number">10</span>] = <span class="hljs-literal">true</span>;<br>            tmp /= <span class="hljs-number">10</span>;<br>        &#125;<br>        <br>        tmp = b;<br>        <span class="hljs-keyword">while</span>(tmp)&#123;<br>            f[tmp%<span class="hljs-number">10</span>] = <span class="hljs-literal">true</span>;<br>            tmp /= <span class="hljs-number">10</span>;<br>        &#125;<br><br>        tmp = c;<br>        <span class="hljs-keyword">while</span>(tmp)&#123;<br>            f[tmp%<span class="hljs-number">10</span>] = <span class="hljs-literal">true</span>;<br>            tmp /= <span class="hljs-number">10</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(f[i]==<span class="hljs-literal">false</span>)&#123;<br>                flag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(flag)&#123;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">" "</span>&lt;&lt;b&lt;&lt;<span class="hljs-string">" "</span>&lt;&lt;c&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> OJ </tag>
            
            <tag> 暴力枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在SQLServer中实现自主存取控制的授权部分</title>
      <link href="realize-authorization-of-dac-in-sqlserver.html"/>
      <url>realize-authorization-of-dac-in-sqlserver.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-说在前面"><a href="#1-说在前面" class="headerlink" title="1. 说在前面"></a>1. 说在前面</h2><p>实现授权(authorization)，只需要通过<code>GRANT</code>和<code>REVOKE</code>语句给某一数据库下的由用户名(username)表示的用户授权即可。但是我发现在SQL server中存在着登录名(login)，用户名等概念，通过<code>GRANT</code>和<code>REVOKE</code>语句授权需要用户名，而用户名又需要登录名，因此对这两个概念的准确把握是很重要的。</p><h2 id="2-登录名和用户名的区别"><a href="#2-登录名和用户名的区别" class="headerlink" title="2. 登录名和用户名的区别"></a>2. 登录名和用户名的区别</h2><p>在SQL server中，登录名(login)是用在访问DBMS时起到一个验证身份的作用(authentication)，它只是能登录进DBMS，但是默认状态下对DBMS中的数据库是没有任何权限的。同时，对登录名赋予的权限是DBMS级别的，也就是说这个登录名如果可以访问数据库，那么对登录名赋予的权限将影响到这个登录名下属的每一个数据库。</p><p>有了登录名，还要有权限才能访问数据库。而赋权是以数据库为单位进行的，数据库通过新增用户名的方式，将该新增的用户名与上文的登录名绑定，实现登录名到用户名的映射（一个不严谨的说法，相当于这个数据库给某个登录名一个“许可证”，从此，这个登录名在这个数据库这算是有头有脸的人了）。一个登录名能有多大权力要看有多少数据库愿意给他“许可证”了，一个登录名手上的许可证越多，那么他能访问的数据库也越多。不过，有了许可证也不是啥都能干，数据库会对每个用户名分配相应的权限，具体给什么样的权限取决于数据库的创建者或者DBA。通过前面的分析，我们知道用户名是数据库层面的，赋予的权限也是仅仅对单个数据库而言。</p><p>一个登录名可以对应多个用户名（相当于在不同的数据库那拿许可证嘛），但是在一个数据库中只能有一个用户名。</p><h2 id="3-具体怎么做"><a href="#3-具体怎么做" class="headerlink" title="3.具体怎么做"></a>3.具体怎么做</h2><p>前面说了一大堆概念，下面说具体怎么做，以下都是通过SQL代码实现的</p><h3 id="3-1-新建登录名"><a href="#3-1-新建登录名" class="headerlink" title="3.1. 新建登录名"></a>3.1. 新建登录名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> LOGIN loginname   <br>   <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">PASSWORD</span> = <span class="hljs-string">'pass'</span><br></code></pre></td></tr></table></figure><p>将上面的<code>loginname</code>，<code>pass</code>换成自己想设置的登录名，密码即可。</p><h3 id="3-2-新建用户名"><a href="#3-2-新建用户名" class="headerlink" title="3.2. 新建用户名"></a>3.2. 新建用户名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> username <span class="hljs-keyword">FOR</span> LOGIN loginname;<br></code></pre></td></tr></table></figure><p>将上面的<code>loginname</code>，<code>username</code>换成自己想设置的登录名，用户名即可。登录名和用户名可以相同，可以不同，取决于个人。</p><h3 id="3-3-通过GRANT和REVOKE授权和收回"><a href="#3-3-通过GRANT和REVOKE授权和收回" class="headerlink" title="3.3. 通过GRANT和REVOKE授权和收回"></a>3.3. 通过GRANT和REVOKE授权和收回</h3><h4 id="3-3-1-GRANT语法"><a href="#3-3-1-GRANT语法" class="headerlink" title="3.3.1. GRANT语法"></a>3.3.1. GRANT语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> &lt;权限&gt;[,&lt;权限&gt;]···<br><span class="hljs-keyword">ON</span> &lt;对象名&gt;<br><span class="hljs-keyword">TO</span> &lt;用户&gt;[,&lt;用户&gt;]···<br>[<span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">OPTION</span>]<br></code></pre></td></tr></table></figure><h4 id="3-3-2-REVOKE语法"><a href="#3-3-2-REVOKE语法" class="headerlink" title="3.3.2. REVOKE语法"></a>3.3.2. REVOKE语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">REVOKE</span> &lt;权限&gt;[,&lt;权限&gt;]···<br><span class="hljs-keyword">ON</span> &lt;对象名&gt;<br><span class="hljs-keyword">FROM</span> &lt;用户&gt;[,&lt;用户&gt;]···<br>[<span class="hljs-keyword">CASCADE</span>|RESTRICT]<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL中更新或修改主键的值</title>
      <link href="update-or-delete-value-of-primary-key-in-sql.html"/>
      <url>update-or-delete-value-of-primary-key-in-sql.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-问题导入"><a href="#1-问题导入" class="headerlink" title="1. 问题导入"></a>1. 问题导入</h2><p>我们应该选取相对固定的属性作为主键，也就是说主键的值轻易不要更改。但是凡事皆有例外，有时候确实需要更改主键的值，比如学生的学号录入错了，且已经录入了成绩，如果直接修改学号的值，会因为外键约束的原因无法修改。</p><p>具体来说，我们考虑三个表：</p><ol><li>学生表s，其中的属性有学号sno（主键），姓名sname，性别sex</li><li>课程表c，其中的属性有课程号cno（主键），课程名称cname，学费credit</li><li>成绩表sc，其中的属性有学号sno，课程号cno，成绩score</li></ol><p>sc中sno和cno共同作为sc的主键且分别引用s和c中的sno，cno作为外键。</p><p>假设我们想把学号为<code>10010</code>的同学的学号改为<code>10001</code>，很容易想到如下的SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> s<br><span class="hljs-keyword">set</span> sno=<span class="hljs-number">10001</span><br><span class="hljs-keyword">where</span> sno=<span class="hljs-number">10010</span><br></code></pre></td></tr></table></figure><p>但是运行的话可能会因为外键约束而拒绝执行。</p><h2 id="2-为什么不能运行"><a href="#2-为什么不能运行" class="headerlink" title="2. 为什么不能运行"></a>2. 为什么不能运行</h2><p>如果sc中已经有引用关于sno=10010的记录了（比如10010这位学生修了课程号为1的这门课，成绩为90分），那么此时如果修改s表中sno的值，sc中的sno作为引用了s中的sno的外键无法跟着改变，便会爆出外键约束的错误。</p><h2 id="3-应该怎么做"><a href="#3-应该怎么做" class="headerlink" title="3. 应该怎么做"></a>3. 应该怎么做</h2><p>将外键约束改为级联(cascade)即可，也就是说当修改主键的值的时候，引用他的外键的值会跟着更改，具体代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> sc<br><span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> fk_sc_sno_1<br><span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span> (sno)<br><span class="hljs-keyword">references</span> s(sno)<br><span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-keyword">cascade</span><br></code></pre></td></tr></table></figure><p><code>on update cascade</code>声明了在<code>update</code>操作时执行级联操作。</p><p>类似的，如果一个已经被引用的元组无法删除，同样需要声明级联操作，将上述代码中的update改为delete即可（级联删除：引用该主码的元组会跟着删除）具体如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> sc<br><span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> fk_sc_sno_2<br><span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span> (sno)<br><span class="hljs-keyword">references</span> s(sno)<br><span class="hljs-keyword">on</span> <span class="hljs-keyword">delete</span> <span class="hljs-keyword">cascade</span><br></code></pre></td></tr></table></figure><p>另外多啰嗦一句关于约束(constraint)的命名，正如上面代码所示<code>fk_sc_sno_1</code>，<code>fk</code>表明是外键（foreign key），<code>sc_sno</code>说明这个外键约束作用在sc这个表的sno这个属性上，至于最后末尾的数字是用于再区分的，因为作用在sc这个表的sno这个属性上的外键约束可能不止一个，比如本文就是两个。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模运算系统与补码</title>
      <link href="modular-arithmetic-system-and-complement.html"/>
      <url>modular-arithmetic-system-and-complement.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是模运算系统？"><a href="#1-什么是模运算系统？" class="headerlink" title="1. 什么是模运算系统？"></a>1. 什么是模运算系统？</h2><p>我在网上查的资料，说模运算系统属于代数中环的概念，但是我只学过微积分、线性代数这些基本的数学而且掌握的一般，对于代数中的群域环也只是听过但不曾了解。</p><p>因为关于代数学的那些资料我实在是看不懂，下面，我就按照我的理解来给他下一个定义，很有可能不严谨甚至是不对，但是对于帮助我在学习计算机系统中的补码概念时的理解理解能自圆其说。我说的不对的地方还请斧正！</p><p>钟表是我们最常见的模运算系统之一，他有12个小时，满12小时就会回到最小值0。</p><p>因此，我们不妨将其抽象成，一个代数系统中只有0、1、2、3、…、11这12个数，对于所有不在这12个数中的数都要用这12个数表示，那怎么表示呢？就用到“环”了（这里的环只是我个人的理解不是代数概念中的环！），我们先来看看0-11这11个数意味着什么？对于0，相当于我们划了一个圆站在其中的一个点（记为原点），那么对于1呢？就相当于从原点出发沿着顺时针方向走了圆环周长的1/12，对于2便是从原点出发沿着顺时针方向走了圆环周长的2/12，因此，13这种不在0-11中的数字我们可以理解成从原点出发沿着顺时针方向走了圆环周长的13/12，便是数字1所在的位置，于是就有在<code>模12（总共有12个数）的模运算系统</code>中1和13是等价的。</p><p>再抽象一些，上面的一大段话我们可以用一个式子来表达</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">A</span>=B+K×M K∈Z<br></code></pre></td></tr></table></figure><p>对于任意一个不在模运算系统中可以直接表达的数字A（如上文的13这种），若能找到一个在模运算中可以直接表达数字B，有上式成立，则A与B在模为M的模运算系统中等价。而K的值我们可以理解成我们沿着圆环走了多少圈。模M为运算系统中数字的个数，上例中M=12。</p><h2 id="2-将减法变成加法"><a href="#2-将减法变成加法" class="headerlink" title="2. 将减法变成加法"></a>2. 将减法变成加法</h2><p>这里我们只考虑两个在模运算系统中可以直接表达的数字之间的减法，我们接着上面的例子说比如<code>8-2</code>，我们都知道等于6，那如何用加法来表示呢？那么问题就变成了<code>8+？=6</code>，我们知道在<code>模12的模运算系统</code>中6和18（12+6）是等价的（就是多走一圈嘛），因此这里的<code>？</code>就可以等于10。</p><p>P.S. 如果要求<code>？</code>也是模运算系统中可以直接表达的数字且做加法，那么他应该是唯一的，否则不唯一。</p><p>那么我们如何快速的知道就是加10呢？可以这么想，-2就是逆时针走两个单位，那么总共是12单位，我顺时针走当然走12-2=10个单位。</p><h2 id="3-模运算系统在补码中的应用"><a href="#3-模运算系统在补码中的应用" class="headerlink" title="3. 模运算系统在补码中的应用"></a>3. 模运算系统在补码中的应用</h2><p>我们常见的计算机都是32位或者64位的，这里的多少位就是2进制的位数，我们考虑简单些，如果是4位的，那么可以表示2<sup>4</sup>=16个数，又因为如果做加法得到的结果需要5位来表示，但只有4位，会自动舍掉最高位（相当于计算结果除以2<sup>4</sup>后的余数），因此是模为2<sup>4</sup>的模运算系统。</p><p>在模运算系统中从0000-1111每个数都可以对应无数个数，为了唯一对应，我们规定0000为0，其余0打头的为正数，1打头的为负数，因此他能表示的数的范围为 [-2<sup>3</sup>,2<sup>3</sup>)，类似的，n位能表示的数的范围为[-2<sup>n-1</sup>,2<sup>n-1</sup>)。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux中Bash提示符高亮</title>
      <link href="highlight-prompt-in-linux-bash.html"/>
      <url>highlight-prompt-in-linux-bash.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-说在前面"><a href="#1-说在前面" class="headerlink" title="1. 说在前面"></a>1. 说在前面</h2><p>在Linux命令行中，因为提示符和打印出来的内容在默认情况下颜色是一样的，运行了很多命令，就很难分清哪些内容属于哪一条命令了。</p><p>提示符（prompt）高亮的话就可以解决这个问题。</p><h2 id="2-编辑-bashrc文件"><a href="#2-编辑-bashrc文件" class="headerlink" title="2. 编辑.bashrc文件"></a>2. 编辑.bashrc文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim ~/.bashrc<br></code></pre></td></tr></table></figure><p>进入编辑界面，找到</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># force_color_prompt=yes</span><br></code></pre></td></tr></table></figure><p>将前面的注释（#）去掉，然后保存文件退出即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 高效生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VirtualBox中安装Guest操作系统</title>
      <link href="install-guest-os-in-virtualbox.html"/>
      <url>install-guest-os-in-virtualbox.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-说在前面"><a href="#1-说在前面" class="headerlink" title="1.说在前面"></a>1.说在前面</h2><p>三个基本的概念</p><p>Host操作系统：安装VirtualBox软件的物理机上的操作系统</p><p>Guest操作系统：虚拟机中运行的操作系统</p><p>虚拟机：由虚拟机软件（例如本文的VirtualBox）创建的，供Guest系统在其中运行的特定环境</p><p>众所周知，操作系统是安装在机器上的，因此，我们可以在我们已有的系统中通过虚拟机软件给他创建出一个环境，就像一台物理机一样，被称为虚拟机。然后再在这台创建的虚拟机中安装需要的操作系统。</p><h2 id="2-创建虚拟机"><a href="#2-创建虚拟机" class="headerlink" title="2. 创建虚拟机"></a>2. 创建虚拟机</h2><p>按照上面我们的分析，第一步我们应该先创建一台虚拟机（有机器才能装系统嘛）。</p><p>打开VirtualBox，点击<code>新建</code>，按需求配置好你的虚拟机（内存，硬盘大小等参数），非常简单的几步即可完成。</p><p>此时，你拥有了一台虚拟机，接下来要给他安装操作系统。</p><h2 id="3-安装Guest操作系统"><a href="#3-安装Guest操作系统" class="headerlink" title="3. 安装Guest操作系统"></a>3. 安装Guest操作系统</h2><p>安装Guest操作系统和我们日常安装系统是十分类似的，因此，学会了下面安装操作系统的方法，你也可以给你的电脑重新装系统了（#——#）</p><h3 id="3-1-下载镜像文件"><a href="#3-1-下载镜像文件" class="headerlink" title="3.1. 下载镜像文件"></a>3.1. 下载镜像文件</h3><p>访问你想要安装系统的官网，下载好镜像文件即可。</p><p>多说一句，如果你想通过USB给自己的电脑装系统，推荐rufus制作系统U盘，方法很简单，网上搜一下就有。</p><h3 id="3-2-将镜像文件插入虚拟机的光驱中"><a href="#3-2-将镜像文件插入虚拟机的光驱中" class="headerlink" title="3.2. 将镜像文件插入虚拟机的光驱中"></a>3.2. 将镜像文件插入虚拟机的光驱中</h3><p>这一步就相当于把光碟插入虚拟机的光驱中，找到你刚刚创建的虚拟机，点击<code>设置-&gt;存储</code>，看到<code>控制器:IDE</code>下面的<code>没有盘片</code>，点击<code>没有盘片</code>，在右侧的属性中，点击一个像光盘的图标（选择一个虚拟光盘文件），找到你下载的镜像文件。</p><h3 id="3-3-启动顺序"><a href="#3-3-启动顺序" class="headerlink" title="3.3. 启动顺序"></a>3.3. 启动顺序</h3><p>点击刚刚在<code>存储</code>上面的<code>系统</code>，确保光驱启动顺序先于硬盘，然后点击确定，启动虚拟机即可。</p><h2 id="4-说在后面"><a href="#4-说在后面" class="headerlink" title="4. 说在后面"></a>4. 说在后面</h2><p>装完系统后，记得刚刚在插入虚拟机光驱的地方（3.2），将镜像文件弹出来。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10获得trustedinstaller权限</title>
      <link href="win10-gets-trustedinstaller-permission.html"/>
      <url>win10-gets-trustedinstaller-permission.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-说在前面"><a href="#1-说在前面" class="headerlink" title="1. 说在前面"></a>1. 说在前面</h2><p>在win10系统中，有时候我们删除东西权限不足，提醒你需要XX权限，而今天我们讨论的就是win10的最高权限<code>trustedinstaller权限</code>，能删除系统软件那种。</p><p>下面是通过修改注册表实现的。</p><h2 id="2-如何开启"><a href="#2-如何开启" class="headerlink" title="2. 如何开启"></a>2. 如何开启</h2><p>新建一个文件，命名为<code>TrustedInstaller.reg</code>，打开，粘贴如下代码</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs lsl">Windows Registry Editor Version <span class="hljs-number">5.00</span><br><br>[HKEY_CLASSES_ROOT\*\shell\runas]<br><br>@=<span class="hljs-string">"Get TrustedInstaller Permission"</span><br><br>[HKEY_CLASSES_ROOT\*\shell\runas\command]<br><br>@=<span class="hljs-string">"cmd.exe /c takeown /f <span class="hljs-subst">\"</span>%1<span class="hljs-subst">\"</span> &amp;&amp; icacls <span class="hljs-subst">\"</span>%1<span class="hljs-subst">\"</span> /grant administrators:F"</span><br><br><span class="hljs-string">"IsolatedCommand"</span>=<span class="hljs-string">"cmd.exe /c takeown /f <span class="hljs-subst">\"</span>%1<span class="hljs-subst">\"</span> &amp;&amp; icacls <span class="hljs-subst">\"</span>%1<span class="hljs-subst">\"</span> /grant administrators:F"</span><br><br>[HKEY_CLASSES_ROOT\Directory\shell\runas]<br><br>@=<span class="hljs-string">"Get TrustedInstaller Permission"</span><br><br><span class="hljs-string">"NoWorkingDirectory"</span>=<span class="hljs-string">""</span><br><br>[HKEY_CLASSES_ROOT\Directory\shell\runas\command]<br><br>@=<span class="hljs-string">"cmd.exe /c takeown /f <span class="hljs-subst">\"</span>%1<span class="hljs-subst">\"</span> /r /d y &amp;&amp; icacls <span class="hljs-subst">\"</span>%1<span class="hljs-subst">\"</span> /grant administrators:F /t"</span><br><br><span class="hljs-string">"IsolatedCommand"</span>=<span class="hljs-string">"cmd.exe /c takeown /f <span class="hljs-subst">\"</span>%1<span class="hljs-subst">\"</span> /r /d y &amp;&amp; icacls <span class="hljs-subst">\"</span>%1<span class="hljs-subst">\"</span> /grant administrators:F /t"</span><br></code></pre></td></tr></table></figure><p>然后，保存，双击运行，之后在你想删除的文件鼠标右键可以看到<code>Get TrustedInstaller Permession</code>，点击即可获得该文件的<code>TrustedInstaller</code>权限。</p><h2 id="3-如何关闭"><a href="#3-如何关闭" class="headerlink" title="3. 如何关闭"></a>3. 如何关闭</h2><p>如果你删除了你想要删除的文件，但是觉得开着那么高的权限不安全。可以按如下方法关闭该权限。</p><p>新建一个文件，命名为<code>cancel TrustedInstaller.reg</code>，打开，粘贴如下代码</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">Windows Registry Editor Version 5.00<br><br>[-HKEY_CLASSES_ROOT<span class="hljs-symbol">\*</span><span class="hljs-symbol">\s</span>hell<span class="hljs-symbol">\r</span>unas]<br><br>[-HKEY_CLASSES_ROOT<span class="hljs-symbol">\D</span>irectory<span class="hljs-symbol">\s</span>hell<span class="hljs-symbol">\r</span>unas]<br></code></pre></td></tr></table></figure><p>保存，双击运行，<code>TrustedInstaller</code>权限就被关闭了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 高效生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ikbc_poker2键位编程小结</title>
      <link href="poker2-key-programming-summary.html"/>
      <url>poker2-key-programming-summary.html</url>
      
        <content type="html"><![CDATA[<h2 id="Part-0-关于换层"><a href="#Part-0-关于换层" class="headerlink" title="Part.0 关于换层"></a>Part.0 关于换层</h2><p>Fn+右Shift</p><h2 id="Part-1-关于Fn及Pn的替换"><a href="#Part-1-关于Fn及Pn的替换" class="headerlink" title="Part.1 关于Fn及Pn的替换"></a>Part.1 关于Fn及Pn的替换</h2><p>注：由于Fn，Pn键位较为特殊，替换时要使用背部的按钮3</p><p>方法：打开背部的3→先按Fn/Pn→再按目标键位 则目标键位被替换为Fn/Pn</p><p>注：Fn替换后原来Fn的位置会变成win键，但可被一般键位替换覆盖</p><h2 id="Part-2-关于一般键位的替换"><a href="#Part-2-关于一般键位的替换" class="headerlink" title="Part.2 关于一般键位的替换"></a>Part.2 关于一般键位的替换</h2><p> 注：红色灯光是输入指令的指示灯，若没有出现相应的灯光，则意味着指令未输入成功</p><ol><li>使用Fn+Ctrol(右)进入编辑状态（此时空格右侧出现蓝光，则表明已经进入编辑状态）</li><li>先指定目标键位（即是马上输入的内容的存储键位），此时红灯闪</li><li>再输入想对目标键位输入的内容 （输入时的键盘是除Fn Pn外未作任何更改的键盘）</li><li>按Pn结束此次输入，目标键位存储内容确定</li><li>若还想改，重复2—4</li><li>更改完想更改的所有键位按Fn+Ctrol（右）退出</li></ol><h2 id="Part-3-关于一些特殊的说明"><a href="#Part-3-关于一些特殊的说明" class="headerlink" title="Part.3 关于一些特殊的说明"></a>Part.3 关于一些特殊的说明</h2><ol><li>无论怎么改，默认的对键盘设置的快捷键不变（如右Ctrol，右Shift即使被改为别的，Fn+右Ctrol，右Shift依然是用右Ctrol，右Shift）</li><li>本人Fn替换到了Caps，Pn替换到了右Alt</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 高效生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL中含exists的嵌套查询</title>
      <link href="nested-subqueries-with-exists-in-sql.html"/>
      <url>nested-subqueries-with-exists-in-sql.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是SQL中的嵌套查询"><a href="#1-什么是SQL中的嵌套查询" class="headerlink" title="1. 什么是SQL中的嵌套查询"></a>1. 什么是SQL中的嵌套查询</h2><p>SQL中的嵌套查询就是一个select-from-where语句套在另一个查询语句中。</p><p>P.S. select-from-where子句讲解</p><p>执行过程首先将from中的多张表通过笛卡尔积变成一张表（若只有一张表就用该表），依次拿出这张表的一个元组，去执行where中的判断，如果判断结果为true则将该条放入结果集，为false则将该条丢弃。</p><h2 id="2-SQL中的exists"><a href="#2-SQL中的exists" class="headerlink" title="2. SQL中的exists"></a>2. SQL中的exists</h2><p>SQL中用<code>exists</code>谓词来测试一个子查询返回的集合是否为空，空返回True，非空返回False。用<code>not exists</code>谓词来测试一个子查询返回的集合是否非空，非空返回True，空返回False。</p><p>具体说来，它们能怎么用呢？</p><h3 id="2-1-用途1"><a href="#2-1-用途1" class="headerlink" title="2.1. 用途1"></a>2.1. 用途1</h3><p>通过<code>相关子查询</code>在where子句中嵌套<code>一层</code>exists子句，来实现<code>逐一检查</code>表中的元组是否符合一定的<code>条件</code>。例子如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">查询所有选修了<span class="hljs-number">1</span>号课程的学生学号<br></code></pre></td></tr></table></figure><p>语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sno<br><span class="hljs-keyword">from</span> student <span class="hljs-keyword">as</span> s<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> *<br>            <span class="hljs-keyword">from</span> sc<br>            <span class="hljs-keyword">where</span> s.sno=sc.sno <span class="hljs-keyword">and</span> cno=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>怎么想到写出这样的查询（可以看着思路再回去看SQL语句）</p><p>我们的思路就是逐一检查student表中的学生挑选出<code>选择了1号课程</code>的学生（one by one），因此在where子句中就应想办法表达出<code>选择1号课程</code>这个判断条件，在SQL中我们可以用exists来表示<code>存在该学生选了1号课程</code>。</p><p>这里需要注意的是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> s.sno=sc.sno <span class="hljs-keyword">and</span> cno=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>和普通的查询无异，找到就返回元组（说明该学生选了1号课程），找不到就不返回元组（说明该学生没有选1号课程）。</p><h3 id="2-2-用途2"><a href="#2-2-用途2" class="headerlink" title="2.2. 用途2"></a>2.2. 用途2</h3><p>用<code>not exists</code>来实现关系代数中的除法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">查询选修了所有课程的学生的学号<br></code></pre></td></tr></table></figure><p>这个如果用关系代数可以很简单地表达，就是<code>SC÷C</code>。但是SQL中没有办法直接做除法。</p><p>我们可以等价的将题目表述为，要查询的学生<code>不存在任何一门没选修的课程</code>，注意，这里的<code>不存在任何一门没选修的课程</code>就是where中应该填入的条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--第一步</span><br><span class="hljs-keyword">select</span> sno<br><span class="hljs-keyword">from</span> student <span class="hljs-keyword">as</span> s<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>（任何一门没选修的课程）<br><span class="hljs-comment">--p.s. not exists（任何一门没选修的课程）=不存在任何一门课没选修</span><br><span class="hljs-comment">--第二步 查找该生没选修的课程</span><br>任何一门没选修的课程可以表示为<br><span class="hljs-keyword">select</span> *<br><span class="hljs-keyword">from</span> course <span class="hljs-keyword">as</span> c <span class="hljs-comment">--从整个course中查找体现了任何一门课程</span><br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>(选修过该门课程)<br><span class="hljs-comment">--第三步</span><br>选修过该门课程就是<br><span class="hljs-keyword">select</span> * <br><span class="hljs-keyword">from</span> sc <br><span class="hljs-keyword">where</span> s.sno=sno <span class="hljs-keyword">and</span> c.cno =cno<br><span class="hljs-comment">--第四步，把代码放到汉字的位置，用一个SQL语句表达为</span><br><span class="hljs-keyword">select</span> sno<br><span class="hljs-keyword">from</span> student <span class="hljs-keyword">as</span> s<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> exist(<span class="hljs-keyword">select</span> *<br>               <span class="hljs-keyword">from</span> course <span class="hljs-keyword">as</span> c<br>               <span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span>*<br>                               <span class="hljs-keyword">from</span> sc<br>                               <span class="hljs-keyword">where</span> s.sno=sno<br>                               <span class="hljs-keyword">and</span> c.cno=cno))<br></code></pre></td></tr></table></figure><p>同时，我们可以换一个思路，从集合的角度来看，该生选择了所有的课程就是全部课程这个集合是该生选的课的集合的子集。怎么把判断子集与<code>exists</code>结合起来呢？</p><p>我们知道<code>exists</code>是判断后面跟的集合是否为空集，而A是B的子集在数学上等价于A与B的差集为空集。因此我们可以判断A与B的差集是否为空即可。</p><p>因此，上面的SQL语句可以等价的表达为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sno<br><span class="hljs-keyword">from</span> student <span class="hljs-keyword">as</span> s<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>((<span class="hljs-keyword">select</span> cno<br>                 <span class="hljs-keyword">from</span> course)<br>                <span class="hljs-keyword">except</span> <span class="hljs-comment">--excpet表示两个集合的差运算</span><br>                (<span class="hljs-keyword">select</span> cno<br>                <span class="hljs-keyword">from</span> sc<br>                <span class="hljs-keyword">where</span> sc.sno=s.sno))<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建立VirtualBox中的客户机与主机的共享文件夹</title>
      <link href="create-shared-folder-between-host-and-client-in-virtualbox.html"/>
      <url>create-shared-folder-between-host-and-client-in-virtualbox.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-说在前面"><a href="#1-说在前面" class="headerlink" title="1. 说在前面"></a>1. 说在前面</h2><h3 id="1-1-为什么要建立共享文件夹"><a href="#1-1-为什么要建立共享文件夹" class="headerlink" title="1.1. 为什么要建立共享文件夹"></a>1.1. 为什么要建立共享文件夹</h3><p>在我们需要虚拟机和主机之间能够互传文件，并且你觉得用QQ文件这种网络传输的方式速度不是很理想的时候，主机与虚拟机的<code>共享文件夹</code>将是一个不错的选择。</p><h3 id="1-2-原理是什么"><a href="#1-2-原理是什么" class="headerlink" title="1.2. 原理是什么"></a>1.2. 原理是什么</h3><p>我也不是研究虚拟化技术的，以下的原理是我看了官方的文档之后的个人总结和<code>猜测</code>，如有不对的地方，欢迎指正！</p><p>在主机里创建一个文件夹，通过虚拟化软件（本文为VirtualBox），让虚拟机能够访问到这个文件夹，或者能向这个文件夹中添加文件。当然，在形式上虚拟机也是一台“电脑”，因此，他们两者之间互传文件在形式上也是通过网络传输（主机与虚拟机间的网络传输）。</p><h3 id="1-3-参数说明"><a href="#1-3-参数说明" class="headerlink" title="1.3. 参数说明"></a>1.3. 参数说明</h3><p>Host OS: Windows 10</p><p>Client OS: Windows 7</p><h2 id="2-安装增强功能"><a href="#2-安装增强功能" class="headerlink" title="2. 安装增强功能"></a>2. 安装增强功能</h2><p>对当前虚拟机<code>安装增强功能</code>（Insert Guest Additions CD Image…）是在虚拟机上安装一些程序使得虚拟机拥有更多的功能，与主机<code>共享文件夹</code>的功能就是其中之一。</p><p>在当前虚拟机的菜单栏里，<code>设备-&gt;安装增强功能</code>，点击<code>Run VBoxWindowsAdditons.exe</code>，然后一路确认即可。或者你可以点击了<code>安装增强功能</code>之后，在<code>此电脑</code>里找到和C盘距离很近的<code>Virtual Guest Additons</code>双击运行也是同样的效果，看个人喜好了。</p><h2 id="3-建立共享文件夹"><a href="#3-建立共享文件夹" class="headerlink" title="3. 建立共享文件夹"></a>3. 建立共享文件夹</h2><p>在主机中找一个地方，建立文件夹。</p><p>建好之后，在当前虚拟机的菜单栏里，<code>设备-&gt;共享文件夹</code>，点击<code>共享文件夹</code> ，在弹出的菜单中找到右边的加号<code>添加共享文件夹</code>，共享文件夹路径中找到刚刚创建文件夹的地方，下面重点说一下下面的几个选项。</p><ul><li>只读分配（ReadOnly）：虚拟机只能从刚刚创建的文件夹中读文件，而不能往里面存文件。</li><li>自动挂载：我们在主机创建的文件夹在虚拟机中被当作一个硬盘来对待，勾选上，他就会自动挂载好，小白推荐，至于手动挂载我们后面说。</li><li>挂载点：就是盘符，比如常见的系统盘是<code>C</code>，填入后以这个字母来命名盘符，不填自动分配，不过填入的字母不能和已有的盘符重复。</li><li>固定分配（Permanent shares）：这个一定要勾上，保证你关了虚拟机再次打开的时候，你刚刚挂载的盘符还在，不然还要从新再弄一次。我觉得固定分配这四个字翻译的不好，会让人产生空间固定大小的误解。</li></ul><p>点击<code>ok</code>即可</p><h2 id="4-说在后面"><a href="#4-说在后面" class="headerlink" title="4. 说在后面"></a>4. 说在后面</h2><p>本文写得很简略，只在核心步骤上提了一下，以及我的一些见解和我认为要注意的地方。</p><p>如果你看了之后不明白，或者对<code>手动挂载</code>有兴趣，又或者你的操作系统不是windows，那么你可以看<a href="https://www.virtualbox.org/manual/ch04.html#sharedfolders" target="_blank" rel="noopener">官方文档</a>，里面有非常详细的说明，官方的文档是英文的，你可以用谷歌翻译来辅助你看，或者评论和我交流。</p><p>打开官方的文档后，内容很多，你只需要看完<code>4.3. Shared Folders</code>，就能找到你想要的答案。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何记笔记</title>
      <link href="how-to-take-notes.html"/>
      <url>how-to-take-notes.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-为什么要记笔记"><a href="#1-为什么要记笔记" class="headerlink" title="1. 为什么要记笔记"></a>1. 为什么要记笔记</h2><ul><li><p>记笔记的好处</p><ol><li>可以把知识体系化，把书读薄，促进思考，增加对知识的理解</li><li>日后查阅自己的笔记比查网上的文章解决问题更高效</li></ol></li><li><p>记笔记的坏处</p><ol><li>记笔记需要花费时间，拖慢学习的进度</li><li>笔记数目多了，需要整理，更花费时间</li></ol></li></ul><p>通过上面对记笔记<code>优点</code>和<code>缺点</code>的分析，再结合人的生命是有限的，我们可以知道，我们应该记录哪些对我们<code>重要</code>的内容，放弃那些对我们<code>没那么重要</code>的内容。</p><h2 id="2-记录什么"><a href="#2-记录什么" class="headerlink" title="2. 记录什么"></a>2. 记录什么</h2><p>每个人的需求是不一样的，但是可以大致的概括如下：</p><ol><li>你很感兴趣的东西，那么这些东西你今后一定会查阅</li><li>在不久的将来一定会遇到的东西，比如这学期的某一门课程，在你读完教材就应该做笔记，因为考试复习的时候你需要他，否则你可能都忘了书本的内容了</li></ol><h2 id="3-怎么记录"><a href="#3-怎么记录" class="headerlink" title="3. 怎么记录"></a>3. 怎么记录</h2><p>在你的笔记中，你就是造物主，你可以按任何你想要的方式安排组织你的笔记内容。因此，按你最喜欢的方式记。毕竟，笔记最主要的是给自己服务的。</p><p>不过，我还有些建议：</p><ol><li>记笔记可以对目前的知识做一些简单的扩展，比如有些概念你需要补充说明。但是，绝对不要<code>过度扩展</code>，不然你真的会走偏的。比如，在解决某种问题的时候，你可能需要用到一下微积分，但是微积分你学得不是很好，你只需要把与你正在做的微积分搞明白即可，如果你单独为此再学一遍微积分，那就真的走偏了。</li><li>学习一个阶段就整理一下笔记（比如一天）。因为，如果你今天学了第一章，没有整理笔记，一周后回来学习第二章，可能第一章的东西让你给忘完了，还要从头学起！</li></ol><h2 id="4-说在后面"><a href="#4-说在后面" class="headerlink" title="4. 说在后面"></a>4. 说在后面</h2><p>个人觉得记笔记确实有些麻烦，但是绝对是你提高效率（特别是需要学完一本书或者一个科目这种无法短期内完成）的一个很好的方法，而且如果你对这部分知识很喜欢，也是你日后忘记了拾起来的一个极好的方法。</p><p>笔记虽好，可不要贪多哦！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 高效生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将PowerDesigner中的概念模型通过物理模型生成表（关系模型）</title>
      <link href="generate-talbe-from-conceptual-model-in-powerdesigner-through-physical-model.html"/>
      <url>generate-talbe-from-conceptual-model-in-powerdesigner-through-physical-model.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-说在前面"><a href="#1-说在前面" class="headerlink" title="1. 说在前面"></a>1. 说在前面</h2><p>本文假设你已经在<code>PowerDesigner</code>做好了你的概念模型，并期望把他变成数据库中的表。</p><h2 id="2-概念模型生成物理模型"><a href="#2-概念模型生成物理模型" class="headerlink" title="2. 概念模型生成物理模型"></a>2. 概念模型生成物理模型</h2><p>特别提醒，在生成物理模型之前，请双击你的每一个<code>Entity</code>，确保每个<code>Entity</code>的<code>Generate</code>都是打勾的状态，否则生成的物理模型中没打勾的实体将被丢弃。</p><p>打开<code>PowerDesigner</code>之后，在顶部的菜单栏目里找到<code>Tools</code>，然后点击，找到<code>Generate Physical Data Model</code>，在弹出的窗口中选择<code>DBMS</code>类型，并填写<code>Name</code>和<code>Code</code>的内容，点击确定即可。</p><h2 id="3-物理模型生成SQL脚本"><a href="#3-物理模型生成SQL脚本" class="headerlink" title="3. 物理模型生成SQL脚本"></a>3. 物理模型生成SQL脚本</h2><p>在<code>Object Brower</code>中选中刚刚生成的物理模型，在顶部的菜单栏目里找到<code>Database</code>，然后点击，找到<code>Generate Database</code>，在弹出的窗口选择存储的位置和填写文件名然后点击确定即可，即可得到一个SQL脚本。</p><h2 id="4-运行SQL脚本生成表"><a href="#4-运行SQL脚本生成表" class="headerlink" title="4. 运行SQL脚本生成表"></a>4. 运行SQL脚本生成表</h2><p>我用的是<code>SQL Server Management Studio (SSMS)</code>这个集成环境下面以他为例来说明如何运行SQL脚本。当然，如果你不用SSMS，你可以选择在命令行里运行或者看看你使用的软件可不可以通过图形界面运行。</p><p>打开后，连接你的数据库，这里不做详细描述。然后，点击菜单栏的<code>File</code>，选择<code>Open</code>，再选择其中的<code>file</code>，按照你刚刚存储的路径打开SQL脚本，点击<code>Excute</code>即可。</p><p>另外说一句，如果你不想用<code>master</code>这个默认的数据库，你可以先自己建一个数据库，然后在你打开的SQL脚本第一行加上</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">USE</span>[<span class="hljs-keyword">database</span> <span class="hljs-keyword">name</span>]<br></code></pre></td></tr></table></figure><p>把<code>database name</code>换成你刚刚创建的数据库的名字，再执行即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware Workstation and Device/Credential Guard are not compatible</title>
      <link href="vmware-workstation-and-device-credential-guard-are-not-compatible.html"/>
      <url>vmware-workstation-and-device-credential-guard-are-not-compatible.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-问题导入"><a href="#1-问题导入" class="headerlink" title="1. 问题导入"></a>1. 问题导入</h2><p>在win10系统中，如果启用了<code>Hyper-V</code>这个自带的虚拟机，当再次使用<code>VMware</code>时就会遇到<code>VMware Workstation and Device/Credential Guard are not compatible</code>的错误提示，无法使用<code>VMware</code></p><h2 id="2-原因分析"><a href="#2-原因分析" class="headerlink" title="2. 原因分析"></a>2. 原因分析</h2><p>启用了<code>Hyper-V</code>，就会开启微软自带的<code>hypervisor</code>，也就是这个程序启动了<code>Credential Guard</code>导致<code>VMware</code>无法启动。</p><h2 id="3-如何解决"><a href="#3-如何解决" class="headerlink" title="3. 如何解决"></a>3. 如何解决</h2><p>因此，我们只需关闭<code>hypervisor</code>，即可关闭<code>Credential Guard</code>。</p><p>以管理员身份运行cmd，输入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">bcdedit /<span class="hljs-keyword">set</span> hypervisorlaunchtype <span class="hljs-keyword">off</span><br></code></pre></td></tr></table></figure><p>然后重启系统就可以了</p><h2 id="4-类似的"><a href="#4-类似的" class="headerlink" title="4. 类似的"></a>4. 类似的</h2><p>如果今后发现需要启用的话，同样以管理员身份运行cmd，输入</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">bcdedit /<span class="hljs-built_in">set</span> hypervisorlaunchtype <span class="hljs-keyword">auto</span><br></code></pre></td></tr></table></figure><p>重启系统即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NexT主题增加统计网站访问量及文章阅读量功能</title>
      <link href="next-theme-add-statistics-feature-on-site-visits-article-views.html"/>
      <url>next-theme-add-statistics-feature-on-site-visits-article-views.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-写在前面"><a href="#1-写在前面" class="headerlink" title="1. 写在前面"></a>1. 写在前面</h2><p>作为用<code>Hexo</code>搭建的<code>静态博客</code>，在统计网站访问量、文章阅读量方面、添加评论方面有着天然的劣势，可以自己写插件，但那样还不如弄一个动态博客，再者就是用别人写好的插件以及用别人的服务器来帮我们存储这些数据。</p><p>对于<code>添加评论功能</code>，可以参考我写的<a href="https://www.shenxiaojian.com/Hexo-NexT-theme-adds-comment-feature.html">另外一篇文章</a>，这篇主要讲如何<code>增加统计网站访问量及文章阅读量</code>的功能。</p><h2 id="2-用不算子插件来实现"><a href="#2-用不算子插件来实现" class="headerlink" title="2. 用不算子插件来实现"></a>2. 用不算子插件来实现</h2><p>就如我前面所说的，实现的方法只要找一个插件即可实现，正巧<code>不算子</code>是NexT主题内置的，我就懒得用别的了，直接修改NexT的主题配置文件就可以了。</p><p>找到你的主题配置文件，应该在你的博客目录下的<code>themes/next/_config.yml</code></p><p>找到如下部分</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">busuanzi_count:</span><br>  <span class="hljs-comment"># count values only if the other configs are false</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># custom uv span for the whole site</span><br>  <span class="hljs-attr">site_uv:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">site_uv_header:</span> <span class="hljs-string">&lt;i</span> <span class="hljs-string">class="fa</span> <span class="hljs-string">fa-user"&gt;&lt;/i&gt;</span><br>  <span class="hljs-attr">site_uv_footer:</span><br>  <span class="hljs-comment"># custom pv span for the whole site</span><br>  <span class="hljs-attr">site_pv:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">site_pv_header:</span> <span class="hljs-string">&lt;i</span> <span class="hljs-string">class="fa</span> <span class="hljs-string">fa-eye"&gt;&lt;/i&gt;</span><br>  <span class="hljs-attr">site_pv_footer:</span><br>  <span class="hljs-comment"># custom pv span for one page only</span><br>  <span class="hljs-attr">page_pv:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">page_pv_header:</span> <span class="hljs-string">&lt;i</span> <span class="hljs-string">class="fa</span> <span class="hljs-string">fa-file-o"&gt;&lt;/i&gt;</span><br>  <span class="hljs-attr">page_pv_footer:</span><br></code></pre></td></tr></table></figure><p>都改为<code>true</code>即可。</p><p>现在可以看一下是否正常显示，如果底部只有图标，而不显示数字，那么你需要接着看下去，否则就不需要看下去了。</p><h2 id="3-小插曲"><a href="#3-小插曲" class="headerlink" title="3. 小插曲"></a>3. 小插曲</h2><p>本来已经完成了，但是因为不算子的域名出现了些问题（被迫更换了），<code>NexT主题</code>内置的部分配置文件没有改过来（今后可能会改过来，现在是日期是2020.3.23），仍然是不算子原来的域名，导致我们自己的网站无法和不算子现在用的网站的统计后台交换数据，无法显示统计的数量。</p><h3 id="3-1-解决方法"><a href="#3-1-解决方法" class="headerlink" title="3.1. 解决方法"></a>3.1. 解决方法</h3><p>进入自己博客文件夹，按如下路径<code>\themes\next\layout_third-party\analytics</code>打开<code>busuanzi-counter.swig</code></p><p>找到</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>更改为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在nginx上实现301重定向 统一域名</title>
      <link href="301-redirection-on-nginx.html"/>
      <url>301-redirection-on-nginx.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-为什么使用301重定向"><a href="#1-为什么使用301重定向" class="headerlink" title="1. 为什么使用301重定向"></a>1. 为什么使用301重定向</h2><p>首先，我们先来说一下<code>301重定向</code>（也叫永久重定向，英文：permanent redirect）能干什么？</p><p><code>301重定向</code>：当用户访问某一个URL时，web服务器被设置自动跳转到另外一个URL，此时返回客户端的返回码为<code>301</code>。</p><p>我们在以下情况会用到<code>301重定向</code>：</p><ol><li>为了用户访问方便，域名解析时同时添加了<code>A记录</code>中的<code>www</code>，和<code>@</code>，这样用户不用输入<code>www</code>就可以找到我们的网页，但也带来了问题，毕竟他们是<code>两个不同URL</code>，搜索引擎收录的时候会认为是两个网页互相抄袭，不利于收录（毕竟两个不同的地址内容完全一样，不就是抄袭嘛），而且统计网站访问数的时候，也是带<code>www</code>的URL和不带的是作为两个，不利于统计。</li><li>如果你更换了域名，希望别人还能找到你，那就更要做<code>301重定向</code>了，就像你开个小卖铺换了个地址，当然要在旧的店铺门口写上，本店已搬往xxx。</li></ol><h2 id="2-如何在nginx上实现301重定向"><a href="#2-如何在nginx上实现301重定向" class="headerlink" title="2. 如何在nginx上实现301重定向"></a>2. 如何在nginx上实现301重定向</h2><h3 id="2-1-语法"><a href="#2-1-语法" class="headerlink" title="2.1. 语法"></a>2.1. 语法</h3><p>只需在nginx的配置文件<code>nginx.conf</code>中加上一行</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">return</span> <span class="hljs-number">301</span> 具体的网址;<br></code></pre></td></tr></table></figure><h3 id="2-2-填在哪里"><a href="#2-2-填在哪里" class="headerlink" title="2.2. 填在哪里"></a>2.2. 填在哪里</h3><p>填在<code>server</code>块里即可，你可以把每一个<code>server</code>想象成一台web服务器。</p><h3 id="2-3-具体怎么填"><a href="#2-3-具体怎么填" class="headerlink" title="2.3. 具体怎么填"></a>2.3. 具体怎么填</h3><p>我们先来介绍一下填写网址必不可少的nginx的<code>全局变量</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx">$host 访问请求中的主机头部，也就是常说的网址<br>$request_uri 请求中host后面的那一大串东西<br>$scheme 请求的协议，比如http，ftp等<br>$server_addr 服务器IP地址<br>$server_name 服务器主机名<br>$server_port 访问服务器的端口号<br></code></pre></td></tr></table></figure><p>对于刚刚的第一种情况，我们可以再添加一个<code>server</code>监听<code>443</code>端口，将不带www的请求转到带www的请求：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">443</span>;<br>    <span class="hljs-attribute">server_name</span>  shenxiaojian.com;<br>    <span class="hljs-attribute">return</span>       <span class="hljs-number">301</span> https://www.shenxiaojian.com<span class="hljs-variable">$request_uri</span>;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">443</span>;<br>    <span class="hljs-attribute">server_name</span>  www.shenxiaojian.com;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就表示如果访问的是我不带www的网址会自动跳到带www的网址。</p><p>对于刚刚的第二种情况，我们可以这样写</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx">server&#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span> <span class="hljs-number">443</span>;<br>    <span class="hljs-attribute">server_name</span> old.name www.old.name;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> <span class="hljs-variable">$scheme</span>://www.new.name<span class="hljs-variable">$request_uri</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意上面的域名替换成自己的就可以了。</p><h3 id="2-4-从性能方面考虑"><a href="#2-4-从性能方面考虑" class="headerlink" title="2.4. 从性能方面考虑"></a>2.4. 从性能方面考虑</h3><p>对于第二种情况没什么好说的，无脑重定向即可。对于第一种情况的讨论，我看网上大概有这么几种方式实现。</p><h4 id="2-4-1-其一"><a href="#2-4-1-其一" class="headerlink" title="2.4.1. 其一"></a>2.4.1. 其一</h4><p>采用<code>rewrite</code>结合<code>正则表达式</code>来实现的，nginx官方对此的评价为：</p><blockquote><p>This is a wrong, cumbersome, and ineffective way. </p></blockquote><p>这样会让我们的web变得低效，当然个人博客这种小网站当然不明显。</p><h4 id="2-4-2-其二"><a href="#2-4-2-其二" class="headerlink" title="2.4.2. 其二"></a>2.4.2. 其二</h4><p>另外一种是只用一个<code>server</code>块监听<code>443</code>端口,用<code>if</code>做条件判断，配置文件这么写</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx">server&#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span>;<br>    <span class="hljs-attribute">server_name</span> www.shenxiaojian.com shenxiaojian.com;<br>    <span class="hljs-attribute">if</span> ( <span class="hljs-variable">$host</span> != www.shenxiaojian.com )&#123;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> <span class="hljs-variable">$scheme</span>://www.shenxiaojian.com<span class="hljs-variable">$request_uri</span>;<br>    &#125;<br> ...<br>&#125;<br></code></pre></td></tr></table></figure><p>这样带来的问题是，无论访问的网址带不带<code>www</code>，都要去判断一次，而我们这一部分开头给出的那种，如果带www的是无需判断的，当然你可以说，两个<code>server</code>来找哪一个的时候，不也是要判断吗？但是我想说，那是软件内部的判断，其优化要比我们自己用<code>if</code>效率高。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo的NexT主题添加评论功能</title>
      <link href="hexo-next-theme-adds-comment-feature.html"/>
      <url>hexo-next-theme-adds-comment-feature.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-概念讲解"><a href="#1-概念讲解" class="headerlink" title="1. 概念讲解"></a>1. 概念讲解</h2><p>刚用Hexo部署好的博客评论功能是没有开启的，为了开启它，我们需要一个<code>评论系统</code>（就是一个别人帮你保存评论的平台），在你博客下的评论内容将保存到他们的服务器中去，今后再打开自己的博客，从他们的服务器中拉去评论内容。</p><h2 id="2-注册账号"><a href="#2-注册账号" class="headerlink" title="2. 注册账号"></a>2. 注册账号</h2><p><code>评论系统</code>有很多，比如<code>Disqus</code>、<code>Livere</code>等，可以选择一个自己喜欢的注册。这里以<code>Livere</code>（中文名：来必力）为例。</p><p>访问<a href="https://www.livere.com/" target="_blank" rel="noopener">Livere官网</a>，点击右上角的图标注册账号，再点击install（安装），选择<code>City</code>即可，按照提示填入自己的网址名，网址的地址，网站类型，然后提交，得到如下的一串代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 来必力City版安装代码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"lv-container"</span> <span class="hljs-attr">data-id</span>=<span class="hljs-string">"city"</span> <span class="hljs-attr">data-uid</span>=<span class="hljs-string">"**********"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="actionscript">   (<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(d, s)</span> </span>&#123;</span><br><span class="actionscript">       <span class="hljs-keyword">var</span> j, e = d.getElementsByTagName(s)[<span class="hljs-number">0</span>];</span><br><br><span class="actionscript">       <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> LivereTower === <span class="hljs-string">'function'</span>) &#123; <span class="hljs-keyword">return</span>; &#125;</span><br><br>       j = d.createElement(s);<br><span class="actionscript">       j.src = <span class="hljs-string">'https://cdn-city.livere.com/js/embed.dist.js'</span>;</span><br><span class="actionscript">       j.async = <span class="hljs-literal">true</span>;</span><br><br>       e.parentNode.insertBefore(j, e);<br><span class="javascript">   &#125;)(<span class="hljs-built_in">document</span>, <span class="hljs-string">'script'</span>);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">noscript</span>&gt;</span>为正常使用来必力评论功能请激活JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">noscript</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- City版安装代码已完成 --&gt;</span><br></code></pre></td></tr></table></figure><p>注意第二行<code>data-uid</code>后面的内容，马上有用。</p><h2 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3. 修改配置文件"></a>3. 修改配置文件</h2><p>打开NexT的主题配置文件,找到</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Support for LiveRe comments system.</span><br><span class="hljs-comment"># You can get your uid from https://livere.com/insight/myCode (General web site)</span><br><span class="hljs-comment">#livere_uid: your uid</span><br></code></pre></td></tr></table></figure><p>将刚刚<code>data-uid</code>后面内容替换<code>your uid</code> 的位置，去掉<code>#</code>。</p><p>大功告成！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTeX学习总结</title>
      <link href="latex-learning-summary.html"/>
      <url>latex-learning-summary.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-关于LaTeX"><a href="#1-关于LaTeX" class="headerlink" title="1. 关于LaTeX"></a>1. 关于LaTeX</h2><h3 id="1-1-LaTeX是干什么的？"><a href="#1-1-LaTeX是干什么的？" class="headerlink" title="1.1. LaTeX是干什么的？"></a>1.1. LaTeX是干什么的？</h3><p>格式化输入文本，使其以相同长度的行和特定尺寸的页显示出来（说人话就是排版）。</p><p>但是真正执行格式化（这里的格式化是动词，排版的意思）文本不是LaTeX而是TeX，我们先来说TeX是什么？</p><p>p.s. <code>字处理程序</code>的一个典型代表就是<code>word</code>，通过加入<code>不可见控制字符</code>来实现排版，它和今天的主角LaTeX是截然不同的。</p><h3 id="1-2-TeX是一个程序"><a href="#1-2-TeX是一个程序" class="headerlink" title="1.2. TeX是一个程序"></a>1.2. TeX是一个程序</h3><p>TeX的学名叫<code>文件格式化程序</code>，我们接下来慢慢说。</p><p>我们都知道直接输入到编辑器里的文本显得很单调，大小都是一样的，不信你看看txt文件里的东西。所以我们就像能不能把那些单调的东西看起来像word里的字符那种，可以调大小，加粗这些（当然word和TeX不是一类东西）。</p><p>TeX就是干这个的，可以调整文本中字符的格式（就是大小，加粗，排版等等），生成排版精美的文档。</p><p>具体来说，TeX是通过<code>宏（macro）</code>的方式，用一些“命令”（其实就是具体代码的宏）来实现排版。因此，TeX也是一门编程语言，用户可以用它编写代码，增加格式化程序的某一功能。</p><h3 id="1-2-LaTeX是TeX的简化"><a href="#1-2-LaTeX是TeX的简化" class="headerlink" title="1.2. LaTeX是TeX的简化"></a>1.2. LaTeX是TeX的简化</h3><p>TeX定义的宏，还是不够抽象，不够接近我们的自然语言，因此，普通人用起来可能有难度，或者觉得有些繁琐。因此，Leslie Lamport教授，在TeX的基础上也定义了一套宏，更加接近自然语言，更加简洁，这也是为什么命名为LaTeX。</p><h2 id="2-安装软件"><a href="#2-安装软件" class="headerlink" title="2. 安装软件"></a>2. 安装软件</h2><p>说完了理论，我们来点实际的，装软件！</p><h3 id="2-1-安装LaTeX发行版"><a href="#2-1-安装LaTeX发行版" class="headerlink" title="2.1. 安装LaTeX发行版"></a>2.1. 安装LaTeX发行版</h3><p>由于我是<code>windows</code>系统，就安装了<code>TeXLive</code>，这个发行版对新手比较友好，而且遇到的困难，网上有很多类似的教程。</p><p>至于安装TeXLive的方法网上有很多，而且就简单的几步，我就不啰嗦了。（明明是觉得截图放在图床上麻烦！！！）</p><h3 id="2-2-安装TeXstudio"><a href="#2-2-安装TeXstudio" class="headerlink" title="2.2. 安装TeXstudio"></a>2.2. 安装TeXstudio</h3><p>有了LaTeX的发行版，便可以用编辑器可以编辑，然后用TeX程序生成排版后的文档，但是这样比较麻烦。</p><p>工欲善其事必先利其器，因此，我们可以安装一款LaTeX编辑器（集成了编辑、代码自动拼写检查、语法高亮等功能），只需点一点图标便可以实现上述复杂的功能。</p><p>这里推荐跨平台开源的TeXstuido，<a href="http://texstudio.sourceforge.net/" target="_blank" rel="noopener">官网</a>直接下载，一路next即可。</p><h2 id="3-LaTeX基础知识"><a href="#3-LaTeX基础知识" class="headerlink" title="3. LaTeX基础知识"></a>3. LaTeX基础知识</h2><h3 id="3-1-文本与命令"><a href="#3-1-文本与命令" class="headerlink" title="3.1. 文本与命令"></a>3.1. 文本与命令</h3><p>一个文档的核心任务就是存储文件，而文件是由一个个字符组成的，字符组成单词，单词组成句子，句子组成段落等等。我们可以把字符、单词、句子、段落都当成一个个基本单位，不过级别不一样。</p><p>区分单词与单词间的分隔是空格或者回车，即使有多个也按一个计算。</p><p>区分段落与段落间的分割是空行，一个或多个均可，同样，即使有多个也只算一个。</p><p>有了我们要记录的文本还不够，为了生成的文件的美观，我们需要排版，而告诉计算机怎么做，就需要我们在文本中加入格式化命令，用<code>\</code>和普通文本区分。</p><h3 id="3-2-LaTeX文档结构"><a href="#3-2-LaTeX文档结构" class="headerlink" title="3.2. LaTeX文档结构"></a>3.2. LaTeX文档结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs latex">\documentclass[选项]&#123;类&#125;<br>全局参数<br>\begin&#123;document&#125;<br>正文和局部参数<br>\end&#123;document&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-LaTeX的三种处理模式"><a href="#3-3-LaTeX的三种处理模式" class="headerlink" title="3.3. LaTeX的三种处理模式"></a>3.3. LaTeX的三种处理模式</h3><ol><li>段落模式：把输入文本当成一队要被断开成页、段落、句子、单词的长字符串。</li><li>数学模式：用来格式化公式，其中，空白会被忽略。</li><li>LR模式：类似于段落模式，但要求在该模式中的字符必须在同一行。</li></ol><p>其中，最普遍使用的是段落模式，根据需要变成数学模式和LR模式，然后完成任务再变回段落模式。</p><h3 id="3-4-用LaTeX排版生成文档流程"><a href="#3-4-用LaTeX排版生成文档流程" class="headerlink" title="3.4. 用LaTeX排版生成文档流程"></a>3.4. 用LaTeX排版生成文档流程</h3><ol><li><p>用编辑器编辑好文本文件（随便哪种编辑器均可），文本文件中应包含实际要展示的内容（比如你的文章之类的）和用字符表示的LaTeX命令，文件后缀为<code>.tex</code>。<br>调用LaTeX命令如下，tex后缀可省：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> latex sample.tex</span><br></code></pre></td></tr></table></figure></li><li><p>以<code>.tex</code>为后缀的文本文件交由LaTeX处理，让TeX程序按照LaTeX定义的宏替换，替换结束后生成一个后缀为<code>.dvi</code>的文件，一个由格式化后的文本和所需的字符集有关信息组成的与设备无关的文件，又叫做元文件（metafile）。</p></li><li><p>由打印机驱动程序，将元文件转化为可以在打印机上输出的形式，最后执行打印，文档打印完成。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 文字排版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令整理</title>
      <link href="linux-common-command.html"/>
      <url>linux-common-command.html</url>
      
        <content type="html"><![CDATA[<p><strong>说明：操作系统为Debian9</strong></p><p>查看当前已设置的自启动程序</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ systemctl list-unit-files | grep enabled<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过cron设置定时任务</title>
      <link href="set-scheduled-tasks-via-cron.html"/>
      <url>set-scheduled-tasks-via-cron.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><h3 id="1-1-关于操作系统及参数"><a href="#1-1-关于操作系统及参数" class="headerlink" title="1.1. 关于操作系统及参数"></a>1.1. 关于操作系统及参数</h3><p>VPS的系统是Debian9 </p><p>crontab的存储路径为<code>/var/spool/cron/crontabs</code></p><h2 id="2-概念讲解"><a href="#2-概念讲解" class="headerlink" title="2. 概念讲解"></a>2. 概念讲解</h2><p>cron是一个守护进程（伴随着电脑一起运行的程序），通过读取配置文件crontab（cron table）来定时执行crontab这个文件中的命令。补充一点，每个用户都可以拥有一个自己的crontab文件。</p><p>简单来说，cron负责干活，crontab负责告诉cron怎么干，所以我们要做的就是把我们想要定时执行的命令写入crontab中。</p><h2 id="3-安装cron及开机自启"><a href="#3-安装cron及开机自启" class="headerlink" title="3. 安装cron及开机自启"></a>3. 安装cron及开机自启</h2><p>大多数系统均预装cron，如果没有的话自己装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ apt install cron<br></code></pre></td></tr></table></figure><p>设置开机自启</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ systemctl <span class="hljs-built_in">enable</span> cron <span class="hljs-comment"># 设置cron开机自启</span><br></code></pre></td></tr></table></figure><p>如果出现</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal">Synchronizing state <span class="hljs-keyword">of</span> cron.service <span class="hljs-keyword">with</span> SysV service script <span class="hljs-keyword">with</span> /<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">systemd</span>/<span class="hljs-title">systemd</span>-<span class="hljs-title">sysv</span>-<span class="hljs-title">install</span>.</span><br><span class="hljs-symbol">Executing:</span> /<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">systemd</span>/<span class="hljs-title">systemd</span>-<span class="hljs-title">sysv</span>-<span class="hljs-title">install</span> <span class="hljs-title">enable</span> <span class="hljs-title">cron</span></span><br></code></pre></td></tr></table></figure><p>执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ /lib/systemd/systemd-sysv-install <span class="hljs-built_in">enable</span> cron<br></code></pre></td></tr></table></figure><h2 id="4-crontab命令配置crontab文件"><a href="#4-crontab命令配置crontab文件" class="headerlink" title="4. crontab命令配置crontab文件"></a>4. crontab命令配置crontab文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ crontab [-u user] [file address] [ -e | -l | -r ]<br></code></pre></td></tr></table></figure><p>其中[-e | -l | -r] 是对crontab配置文件层面的操作</p><ol><li>[-u user] 指定某个用户的crontab文件，默认为当前用户</li><li>[file address] 从指定位置读取配置信息到<code>crontabs</code>中（只有创建或更新crontab的时候会用到这个参数）</li><li>[-e] 编辑某个用户的crontab文件（默认当前用户）</li><li>[-l] 列出某个用户的crontab文件中的定时任务（默认当前用户）</li><li>[-r] 删除某个用户的crontab文件（默认当前用户）</li></ol><h2 id="5-crontab怎么写"><a href="#5-crontab怎么写" class="headerlink" title="5. crontab怎么写"></a>5. crontab怎么写</h2><p>每一个定时任务在crontab中是一行，比如</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">0 0 1,2,19,20 * * /usr/bin/cerbot renew<br></code></pre></td></tr></table></figure><p>表示每个月的1，2，19，20号的0点0分执行<code>/usr/bin/cerbot renew</code>，具体内容接下来展开说：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># ┌──── minute (0 - 59)</span><br><span class="hljs-comment"># │ ┌──── hour (0 - 23)</span><br><span class="hljs-comment"># │ │ ┌─── day of the month (1 - 31)</span><br><span class="hljs-comment"># │ │ │ ┌──── month (1 - 12)</span><br><span class="hljs-comment"># │ │ │ │ ┌──── day of the week (0 - 6)</span><br><span class="hljs-comment"># │ │ │ │ │                               </span><br><span class="hljs-comment"># │ │ │ │ │</span><br><span class="hljs-comment"># │ │ │ │ │</span><br><span class="hljs-comment"># * * * * * command to execute</span><br></code></pre></td></tr></table></figure><p>通常情况下，每个命令由6个部分组成，有些系统会更多，但是这6个是通用的。</p><p>以下讲解每一部分中常用的3个符号<code>,</code>和<code>-</code>以及<code>/</code></p><p>第一列是分钟，第二列是小时，剩下的部分类似。如果一个部分要填多个可以用<code>,</code>比如，每个月的1，2，19，20号，就在day的那一栏填入<code>1，2，19，20</code>，逗号隔开即可。如果想表达连续的范围，比如每个月的3号到10号，当然可以用<code>3,4,5,6,7,8,9,10</code>，但是略显长，可以用<code>3-10</code>来替代更加简洁。至于<code>*</code>就是表示这个部分所有的值。还有<code>/</code>表示间隔频率，如刚刚表示3月到10月每两个月执行一次的改为<code>3-10/2</code>表示3月到10月，每两个月执行一次。</p><h2 id="6-怎么建立属于自己的crontab"><a href="#6-怎么建立属于自己的crontab" class="headerlink" title="6. 怎么建立属于自己的crontab"></a>6. 怎么建立属于自己的crontab</h2><h3 id="6-1-设置环境变量"><a href="#6-1-设置环境变量" class="headerlink" title="6.1. 设置环境变量"></a>6.1. 设置环境变量</h3><p>编辑当前用户<code>home</code>目录下的<code>.profile</code>文件（.profile文件用来设置当前用户的环境变量）。在其中加入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 以下指明编辑器用vi，可以安装自己喜欢的更换</span><br>EDITOR=vi; <span class="hljs-built_in">export</span> EDITOR<br></code></pre></td></tr></table></figure><h3 id="6-2-创建crontab文件"><a href="#6-2-创建crontab文件" class="headerlink" title="6.2.创建crontab文件"></a>6.2.创建crontab文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ vi filename <span class="hljs-comment"># 自己决定文件名</span><br>$ crontab filename <span class="hljs-comment"># 执行后，系统在/var/spool/cron/crontabs创建与用户名同名的文件，将filename中的内容copy过去</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML常见标签及属性缩写的全称</title>
      <link href="full-name-of-html-common-tags-attribute-abbreviations.html"/>
      <url>full-name-of-html-common-tags-attribute-abbreviations.html</url>
      
        <content type="html"><![CDATA[<p>整理日常学习中见到的标签，来帮助自己理解记忆，同时也有助于看到计算机方面的其他缩写能快速的反应过来。</p><p>具体标签讲解，可以参考<a href="https://qige.io/web/brief-html/index.html#0" target="_blank" rel="noopener">这里</a>。</p><h2 id="1-标签全称"><a href="#1-标签全称" class="headerlink" title="1. 标签全称"></a>1. 标签全称</h2><p><code>&lt;a&gt;</code> anchor 锚的意思，用来在万维网中定义（想象一下船用锚来固定自己的位置）</p><p><code>&lt;br&gt;</code>  break 中断改行，接下来的内容从下一行开始</p><p><code>&lt;del&gt;</code>  delete 表示文本是被删除（划掉）的，以下给出一个例子。效果：<del>这是一个例子</del></p><p><code>&lt;em&gt;</code> emphasis 强调，具体表现为文字是斜体的</p><p><code>&lt;hr&gt;</code> horizontal rule 水平尺 表示某一主题或话题的中断</p><p><code>&lt;ins&gt;</code> insert 用来表示文本是新增的（相较于第一次编写）,以下给出一个例子。效果：<ins>这是一个例子</ins></p><p><code>&lt;li&gt;</code> list item 列举的每一项</p><p><code>&lt;nav&gt;</code> navigation 该元素内的内容负责提供导航链接</p><p><code>&lt;ol&gt;</code> ordered list 标序号的列举</p><p><code>&lt;p&gt;</code> paragraph 最常用的标签之一，用来表示段落</p><p><code>&lt;pre&gt;</code> preformatted 预格式化，标签里的内容是什么样就展示什么样</p><p><code>&lt;s&gt;</code> strikethrough 表示文本是被删除（划掉）的,与上文的<code>&lt;del&gt;</code>类似。以下给出一个例子。效果：<s>这是一个例子</s></p><p> <code>&lt;td&gt;</code> table data 表示表格的一个单元格，也就是表的数据了嘛</p><p> <code>&lt;th&gt;</code> table head 表示表头，就是第一行的单元格，算是比较特殊的单元格吧</p><p><code>&lt;tr&gt;</code> table row 表示表格的一行</p><p><code>&lt;u&gt;</code> underline 给文本增添下划线</p><p><code>&lt;ul&gt;</code> unordered list 不标序号的列举</p><h2 id="2-属性全称"><a href="#2-属性全称" class="headerlink" title="2. 属性全称"></a>2. 属性全称</h2><p>  <code>href</code> Hypertext Reference 表示超链接目标的URL，可以简单理解为网址</p><p>  <code>rel</code> relationship 用在link中，表示目标文档与该文档的关系</p><p><code>alt</code> alternative 备用的，可替换的</p>]]></content>
      
      
      
        <tags>
            
            <tag> 网页设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Certbot网站Https化</title>
      <link href="website-https-via-certbot.html"/>
      <url>website-https-via-certbot.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><h3 id="1-1-关于操作系统及参数"><a href="#1-1-关于操作系统及参数" class="headerlink" title="1.1. 关于操作系统及参数"></a>1.1. 关于操作系统及参数</h3><p>VPS的系统是Debian9 </p><p>webserver为Nginx</p><h2 id="2-给域名注册证书"><a href="#2-给域名注册证书" class="headerlink" title="2. 给域名注册证书"></a>2. 给域名注册证书</h2><h3 id="2-1-安装certbot"><a href="#2-1-安装certbot" class="headerlink" title="2.1. 安装certbot"></a>2.1. 安装certbot</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sudo apt-get install certbot python-certbot-nginx<br></code></pre></td></tr></table></figure><h3 id="2-2-注册证书"><a href="#2-2-注册证书" class="headerlink" title="2.2. 注册证书"></a>2.2. 注册证书</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sudo certbot --nginx -d 你的域名 -m 你的邮箱<br><span class="hljs-comment"># 多个域名用逗号(,)隔开 邮箱可填可不填用来接收通知</span><br><span class="hljs-comment"># 注册完成后根据提示便可知道生成文件位置</span><br></code></pre></td></tr></table></figure><p><code>--nginx</code>选项会自动修改nginx.conf里<code>ssl_certificate</code>及<code>ssl_certificate_key</code>的路径，并在其后注释<code>managed by Certbot</code>便于区分。</p><h2 id="3-配置Nginx"><a href="#3-配置Nginx" class="headerlink" title="3. 配置Nginx"></a>3. 配置Nginx</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 只贴出了server内的代码，其中80端口强转443端口，即全网站https化</span><br><span class="hljs-comment"># 注意将下面的your.domain.name替换为自己的域名</span><br><span class="hljs-comment"># 至于server中省略的location按自己的实际情况来写</span><br><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span> your.domain.name;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://<span class="hljs-variable">$server_name</span><span class="hljs-variable">$request_uri</span>;<br>    &#125;<br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;<br>        <span class="hljs-attribute">ssl</span> <span class="hljs-literal">on</span>;  <br>        <span class="hljs-attribute">server_name</span> your.domain.name;<br>        <span class="hljs-attribute">access_log</span>  /var/log/nginx/blog_access.log;<br>        <span class="hljs-attribute">error_log</span>   /var/log/nginx/blog_error.log;<br>        <span class="hljs-attribute">error_page</span> <span class="hljs-number">404</span> =  /<span class="hljs-number">404</span>.html;<br><br>        <span class="hljs-attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;<br>        <span class="hljs-attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<br>        <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br>        <span class="hljs-attribute">ssl_certificate</span> /etc/letsencrypt/live/your.domain.name/fullchain.pem;<br>        <span class="hljs-attribute">ssl_certificate_key</span> /etc/letsencrypt/live/your.domain.name/privkey.pem;<br>    &#125;<br></code></pre></td></tr></table></figure><p>注：如果你同时把ip解析到了自己的裸域名和用www表示的主机名，那么建议你使用<code>301重定向</code>，这样对于你的搜索引擎优化有好处，具体你可以看<a href="https://www.shenxiaojian.com/301-redirection-on-nginx.html">这篇文章</a>了解更多。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Hexo在VPS上建站小结</title>
      <link href="site-summary-on-vps-via-hexo.html"/>
      <url>site-summary-on-vps-via-hexo.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-说明"><a href="#0-说明" class="headerlink" title="0. 说明"></a>0. 说明</h2><h3 id="0-1-关于操作系统及参数"><a href="#0-1-关于操作系统及参数" class="headerlink" title="0.1. 关于操作系统及参数"></a>0.1. 关于操作系统及参数</h3><p>VPS的系统是Debian9 </p><p>本机操作系统是Windows10</p><h3 id="0-2-关于搭建思路"><a href="#0-2-关于搭建思路" class="headerlink" title="0.2. 关于搭建思路"></a>0.2. 关于搭建思路</h3><p>在本地端，通过Hexo把markdown文件转化为html页面，再通过git将本地的仓库与远程的仓库同步。</p><p>在服务器端，通过设置hooks（钩子），来实现把git仓库里的文件自动化放到网站目录下。通过nginx来处理请求。</p><h2 id="1-服务器端"><a href="#1-服务器端" class="headerlink" title="1. 服务器端"></a>1. 服务器端</h2><h3 id="1-1-安装git"><a href="#1-1-安装git" class="headerlink" title="1.1. 安装git"></a>1.1. 安装git</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sudo apt install git<br></code></pre></td></tr></table></figure><h3 id="1-2-关于git账户的设置"><a href="#1-2-关于git账户的设置" class="headerlink" title="1.2. 关于git账户的设置"></a>1.2. 关于git账户的设置</h3><h4 id="1-2-1-创建git账户"><a href="#1-2-1-创建git账户" class="headerlink" title="1.2.1. 创建git账户"></a>1.2.1. 创建git账户</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sudo adduser git<br></code></pre></td></tr></table></figure><h4 id="1-2-2-修改git用户权限"><a href="#1-2-2-修改git用户权限" class="headerlink" title="1.2.2. 修改git用户权限"></a>1.2.2. 修改git用户权限</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ vim /etc/sudoers<br></code></pre></td></tr></table></figure><p>找到以下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># User privilege specification</span><br>root    ALL=(ALL:ALL) ALL<br></code></pre></td></tr></table></figure><p>在root那一行下添一行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git ALL=(ALL:ALL) ALL<br></code></pre></td></tr></table></figure><p>保存文件并退出。</p><h4 id="1-2-3-配置SSH密钥登录"><a href="#1-2-3-配置SSH密钥登录" class="headerlink" title="1.2.3. 配置SSH密钥登录"></a>1.2.3. 配置SSH密钥登录</h4><p>如何生成<code>SSH</code>密钥网上有很多教程，随便找一篇即可，下面假设你已经生成好了<code>SSH</code>密钥。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ su git<br>$ <span class="hljs-built_in">cd</span> ~<br>$ mkdir .ssh<br>$ vim authorized_keys<br></code></pre></td></tr></table></figure><p>将生成的.pub后缀的公钥内容拷贝到<code>authorized_keys</code>文件内</p><h4 id="1-2-4-创建网站目录"><a href="#1-2-4-创建网站目录" class="headerlink" title="1.2.4. 创建网站目录"></a>1.2.4. 创建网站目录</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">cd</span> /var/www/              <br>$ mkdir blog <span class="hljs-comment">#今后blog静态文件就存在该目录下</span><br></code></pre></td></tr></table></figure><h4 id="1-2-5-创建git仓库"><a href="#1-2-5-创建git仓库" class="headerlink" title="1.2.5. 创建git仓库"></a>1.2.5. 创建git仓库</h4> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">cd</span> ~<br>$ mkdir blog.git<br>$ <span class="hljs-built_in">cd</span> blog.git        <br>$ git init --bare <span class="hljs-comment">#使用--bare参数初始化为裸仓库，不包含工作区</span><br></code></pre></td></tr></table></figure><h4 id="1-2-6-修改Hooks文件"><a href="#1-2-6-修改Hooks文件" class="headerlink" title="1.2.6. 修改Hooks文件"></a>1.2.6. 修改Hooks文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">cd</span> ~/blog.git/hooks<br>$ vim post-receive <br><span class="hljs-comment">#将下列内容拷贝到post-receive中</span><br><span class="hljs-meta">#!/bin/sh</span><br>git --work-tree=/var/www/blog --git-dir=/home/git/blog.git checkout -f<br><span class="hljs-comment">#保存退出</span><br></code></pre></td></tr></table></figure><h4 id="1-2-7-禁止git用户shell权限"><a href="#1-2-7-禁止git用户shell权限" class="headerlink" title="1.2.7. 禁止git用户shell权限"></a>1.2.7. 禁止git用户shell权限</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sudo vim /etc/passwd<br><span class="hljs-comment">#将最后一行的</span><br>git:x:1001:1001:,,,:/home/git:/bin/bash<br><span class="hljs-comment">#修改为</span><br>git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell<br></code></pre></td></tr></table></figure><h3 id="1-3-关于Nginx的设置"><a href="#1-3-关于Nginx的设置" class="headerlink" title="1.3. 关于Nginx的设置"></a>1.3. 关于Nginx的设置</h3><h4 id="1-3-1-安装Nginx"><a href="#1-3-1-安装Nginx" class="headerlink" title="1.3.1. 安装Nginx"></a>1.3.1. 安装Nginx</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sudo apt install nginx<br></code></pre></td></tr></table></figure><h4 id="1-3-2-配置Nginx"><a href="#1-3-2-配置Nginx" class="headerlink" title="1.3.2. 配置Nginx"></a>1.3.2. 配置Nginx</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sudo vim /etc/nginx/nginx.conf<br></code></pre></td></tr></table></figure><p>修改nginx的配置文件，可参考如下内容</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    listen 80 default;              //默认监听80端口<br>    root /var/www/blog;             //网站根目录<br>    server_name www.shannon.best;  //网址<br>    <span class="hljs-attribute">access_log</span>  /var/log/nginx/blog_access.log;<br>    <span class="hljs-attribute">error_log</span>   /var/log/nginx/blog_error.log;<br>    <span class="hljs-attribute">error_page</span> <span class="hljs-number">404</span> =  /<span class="hljs-number">404</span>.html;<br><br>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~* ^.+\.(ico|gif|jpg|jpeg|png)$</span> &#123;<br>        <span class="hljs-attribute">root</span> /var/www/blog;<br>        <span class="hljs-attribute">access_log</span>   <span class="hljs-literal">off</span>;<br>        <span class="hljs-attribute">expires</span>      <span class="hljs-number">1d</span>;<br>    &#125;<br><br>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~* ^.+\.(css|js|txt|xml|swf|wav)$</span> &#123;<br>        <span class="hljs-attribute">root</span> /var/www/blog;<br>        <span class="hljs-attribute">access_log</span>   <span class="hljs-literal">off</span>;<br>        <span class="hljs-attribute">expires</span>      <span class="hljs-number">10m</span>;<br>    &#125;<br><br>    <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-attribute">root</span> /var/www/blog;<br>        <span class="hljs-attribute">if</span> (-f <span class="hljs-variable">$request_filename</span>) &#123;<br>        <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/(.*)$</span>  /<span class="hljs-variable">$1</span> <span class="hljs-literal">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-attribute">location</span> /nginx_status &#123;<br>        <span class="hljs-attribute">stub_status</span> <span class="hljs-literal">on</span>;<br>        <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sudo systemctl start nginx <span class="hljs-comment">#运行nginx</span><br>$ sudo systemctl <span class="hljs-built_in">enable</span> nginx <span class="hljs-comment">#设置nginx开机自启</span><br>$ sudo systemctl status nginx <span class="hljs-comment">#显示active(running)，运行正常</span><br></code></pre></td></tr></table></figure><p>这里的配置文件只是凑活够用，关于配置文件的进阶操作，可以访问我的<a href="https://www.shenxiaojian.com/website-https-via-certbot.html">另一篇文章</a>，使全网站Https化，用户的访问更安全。</p><h2 id="2-客户端（本地）"><a href="#2-客户端（本地）" class="headerlink" title="2. 客户端（本地）"></a>2. 客户端（本地）</h2><h3 id="2-1-安装cmder"><a href="#2-1-安装cmder" class="headerlink" title="2.1. 安装cmder"></a>2.1. 安装cmder</h3><p>访问<a href="https://cmder.net/" target="_blank" rel="noopener">cmder官网</a>，安装了cmder，便可在windows系统下使用Linux的shell。</p><p>下载Mini版的即可。</p><h3 id="2-2-安装git"><a href="#2-2-安装git" class="headerlink" title="2.2. 安装git"></a>2.2. 安装git</h3><p>windows系统去<a href="https://git-scm.com/" target="_blank" rel="noopener">git官网</a>下载git</p><p>下载好后在cmder中运行<code>git --version</code>若查看到git的版本号，则说明git安装成功。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 一些关于git的设置</span><br>$ git config --global user.name <span class="hljs-string">"你的用户名"</span><br>$ git config --global user.email <span class="hljs-string">"你的邮箱地址"</span><br><span class="hljs-comment"># 如果接下来用git时非常卡，可用以下设置走代理</span><br>$ git config --global http.proxy socks5://127.0.0.1:1080<br>$ git config --global https.proxy socks5://127.0.0.1:1080<br><span class="hljs-comment"># 一步搞定</span><br>git config --global http.https://github.com.proxy socks5://127.0.0.1:1080<br><span class="hljs-comment"># 取消代理</span><br>$ git config --global --<span class="hljs-built_in">unset</span> http.proxy<br>$ git config --global --<span class="hljs-built_in">unset</span> https.proxy<br><span class="hljs-comment"># 查询当前已设置代理</span><br>$ git config --global http.proxy<br>$ git config --global https.proxy<br></code></pre></td></tr></table></figure><h3 id="2-3-安装Node-js"><a href="#2-3-安装Node-js" class="headerlink" title="2.3. 安装Node.js"></a>2.3. 安装Node.js</h3><p>Hexo是Node.js的一个包，因此安装Hexo必须先安装Node.js。与安装git类似，访问<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js官网</a>，安装时一直<code>next</code>即可，在cmder中运行<code>node --version</code>，若查看到Node.js的版本号，则说明安装成功。</p><h3 id="2-4-安装Hexo"><a href="#2-4-安装Hexo" class="headerlink" title="2.4. 安装Hexo"></a>2.4. 安装Hexo</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ npm install -g hexo-cli <span class="hljs-comment"># command line interface</span><br>$ npm install hexo-server --save <span class="hljs-comment">#安装save模块，便于在本地测试，可选</span><br></code></pre></td></tr></table></figure><h3 id="2-5-配置本地SSH密钥登陆"><a href="#2-5-配置本地SSH密钥登陆" class="headerlink" title="2.5. 配置本地SSH密钥登陆"></a>2.5. 配置本地SSH密钥登陆</h3><p>将生成的私钥存放在<code>C:\Users\当前用户文件夹\.ssh</code>下</p><h3 id="2-6-本地博客初始化"><a href="#2-6-本地博客初始化" class="headerlink" title="2.6. 本地博客初始化"></a>2.6. 本地博客初始化</h3><p>在自己喜欢的地方新建一个文件夹，通过<code>cd</code>命令，使cmder处于该目录下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ hexo init<br></code></pre></td></tr></table></figure><p>若命令行中显示<code>INFO Start blogging with Hexo!</code>则说明安装成功。</p><h3 id="2-7-配置文件-config-yml"><a href="#2-7-配置文件-config-yml" class="headerlink" title="2.7. 配置文件_config.yml"></a>2.7. 配置文件_config.yml</h3><p>在刚刚<code>init</code>的文件夹里找到<code>_config.yml</code>，如果VPS修改了ssh端口号，在配置文件_config.yml中建议用ssh协议,打开配置文件找到depoly，修改如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">deploy</span>: <br>  <span class="hljs-attribute">type</span>: git<br>  <span class="hljs-attribute">repo</span>: <span class="hljs-attribute">ssh</span>:<span class="hljs-comment">//username@ip:port/home/git/blog.git</span><br>  <span class="hljs-attribute">branch</span>: master<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
